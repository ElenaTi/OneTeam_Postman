{git
	"info": {
		"_postman_id": "e58c3ea5-2787-4d0b-ba90-833142fe4e7f",
		"name": "OneTeam",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24882687"
	},
	"item": [
		{
			"name": "Login_User",
			"item": [
				{
					"name": "Login_Unvalid_Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 403\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(403);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "log",
									"value": "51951tes",
									"type": "text"
								},
								{
									"key": "pwd",
									"value": "51951",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/user/login",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login_By_FL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is a valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"pm.test(\"У пользователя отсутствует массив rights и параметр dostuplkp\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.rights).to.not.exist;\r",
									"})\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"var sessionId;\r",
									"pm.test(\"Get sessionId for tests\", \r",
									"    function () {\r",
									"    sessionId = pm.response.json().data.session;\r",
									"    pm.environment.set(\"sessionId\", sessionId);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "log",
									"value": "9119569663",
									"type": "text"
								},
								{
									"key": "pwd",
									"value": "ntqz5730",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/user/login",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "profile_FL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 403\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус message 'Доступ запрещен.'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.message).to.eql(\"Доступ запрещен.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/user/profile",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login_By_UL_not_vendor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is a valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"pm.test(\"У пользователя отсутствует параметр dostuplkp\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.rights.dostuplkp).to.not.exist;\r",
									"})\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "log",
									"value": "60004392tes",
									"type": "text"
								},
								{
									"key": "pwd",
									"value": "rvfa8424",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/user/login",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login_User_Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\", \r",
									"    function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is a valid JSON\", function () {\r",
									"    pm.response.to.be.json; // Проверяем, что ответ в формате JSON\r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"pm.test(\"У поставщика dostuplkp='on'\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.rights.dostuplkp).to.eql(\"on\");\r",
									"})\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"var sessionId;\r",
									"pm.test(\"Get sessionId for tests\", \r",
									"    function () {\r",
									"    sessionId = pm.response.json().data.session;\r",
									"    pm.environment.set(\"sessionId\", sessionId);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var today = new Date();\r",
									"today.setMonth(today.getMonth() - 1);\r",
									"var requestedDate = today.toISOString().slice(0, 10);\r",
									"var parts = requestedDate.split(\"-\");\r",
									"var formattedDate = parts[2] + \"-\" + parts[1] + \"-\" + parts[0];\r",
									"pm.environment.set(\"lastMonthDate\", formattedDate);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "log",
									"value": "51951tes",
									"type": "text"
								},
								{
									"key": "pwd",
									"value": "heph7146",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/user/login",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login_User_Success КИМ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\", \r",
									"    function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is a valid JSON\", function () {\r",
									"    pm.response.to.be.json; // Проверяем, что ответ в формате JSON\r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"pm.test(\"У поставщика dostuplkp='on'\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.rights.dostuplkp).to.eql(\"on\");\r",
									"})\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"var sessionId;\r",
									"pm.test(\"Get sessionId for tests\", \r",
									"    function () {\r",
									"    sessionId = pm.response.json().data.session;\r",
									"    pm.environment.set(\"sessionKIM\", sessionId);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var today = new Date();\r",
									"today.setMonth(today.getMonth() - 1);\r",
									"var requestedDate = today.toISOString().slice(0, 10);\r",
									"var parts = requestedDate.split(\"-\");\r",
									"var formattedDate = parts[2] + \"-\" + parts[1] + \"-\" + parts[0];\r",
									"pm.environment.set(\"lastMonthDate\", formattedDate);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "log",
									"value": "51951cka",
									"type": "text"
								},
								{
									"key": "pwd",
									"value": "lxca1500",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/user/login",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is a valid JSON\", function () {\r",
									"    pm.response.to.be.json; // Проверяем, что ответ в формате JSON\r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"У поставщика dostuplkp='on'\", function(){\r",
									"    pm.expect(jsonData.data.rights.dostuplkp).to.eql(\"on\");\r",
									"})\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/user/profile",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "contractvendors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is a valid JSON\", function () {\r",
									"    pm.response.to.be.json; // Проверяем, что ответ в формате JSON\r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; // Пытаемся распарсить ответ\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/user/profile/contractsvendors",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"user",
								"profile",
								"contractsvendors"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Новые товары",
			"item": [
				{
					"name": "/co_table/job_state-список статусов загрузок",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is a valid JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив rows есть в ответе, не пустой\", function () {\r",
									"    pm.expect(jsonData.data.rows).to.exist;\r",
									"    pm.expect(jsonData.data.rows).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/info/search/co_table/job_state",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"info",
								"search",
								"co_table",
								"job_state"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload_CSV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе, не пустой, Название отправленного файла соответствует\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"    pm.expect(jsonData.data).not.to.be.empty;\r",
									"    pm.expect(jsonData.data.source_name).to.be.eql(\"Новые товары.csv\")\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"var fileNameOnServer;\r",
									"pm.test(\"Получение названия файла на сервере\", \r",
									"    function () {\r",
									"    fileNameOnServer= pm.response.json().data.file_name;\r",
									"    pm.environment.set(\"fileNameOnServerNewGoods\", fileNameOnServer);\r",
									"});\r",
									"console.log(fileNameOnServer);\r",
									"\r",
									"var fileNameByUser\r",
									"pm.test(\"Название файла пользователя\", function(){\r",
									"    fileNameByUser = pm.response.json().data.source_name;\r",
									"    pm.environment.set(\"fileNameByUserCSV\",\"file_name%3D\"+fileNameByUser);\r",
									"    pm.environment.set(\"newgoodsfile\", fileNameByUser);\r",
									"})\r",
									"console.log(\"file_name=\"+fileNameByUser);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomNumber() {\r",
									"    var randomNumber = '';\r",
									"    for (var i = 0; i < 10; i++) {\r",
									"        randomNumber += Math.floor(Math.random() * 10); // Добавляем случайную цифру от 0 до 9\r",
									"    }\r",
									"    return randomNumber;\r",
									"}\r",
									"\r",
									"var randomDigitsNumber = generateRandomNumber();\r",
									"pm.environment.set(\"randomNum\", randomDigitsNumber);\r",
									"\r",
									"console.log(randomDigitsNumber);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "rc",
									"value": "nsi",
									"type": "text"
								},
								{
									"key": "man",
									"value": "in",
									"type": "text"
								},
								{
									"key": "fileToUpload",
									"type": "file",
									"src": "postman-cloud:///1eeeb69c-66de-4b90-81cd-3eedd44deeec"
								},
								{
									"key": "num",
									"value": "{{randomNum}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/file/upload",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"file",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "job/3/create -Новые товары",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе, не пустой\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"    pm.expect(jsonData.data).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"/*setTimeout(function(){\r",
									"    pm.sendRequest(\"Следующий запрос\");\r",
									"}, 45000);*/"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/job/3/create?p_state=6&p_file_server={{fileNameOnServerNewGoods}}&p_parameters={{fileNameByUserCSV}}",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"job",
								"3",
								"create"
							],
							"query": [
								{
									"key": "p_state",
									"value": "6"
								},
								{
									"key": "p_file_server",
									"value": "{{fileNameOnServerNewGoods}}"
								},
								{
									"key": "p_parameters",
									"value": "{{fileNameByUserCSV}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Характеристики товаров",
			"item": [
				{
					"name": "Upload_CSV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе, не пустой, название отправленного файла соответствует\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"    pm.expect(jsonData.data).not.to.be.empty;\r",
									"    pm.expect(jsonData.data.source_name).to.be.eql(\"Характеристики2.csv\");\r",
									"});\r",
									"\r",
									"var fileNameOnServer;\r",
									"pm.test(\"Получение названия файла на сервере\", \r",
									"    function () {\r",
									"    fileNameOnServer= pm.response.json().data.file_name;\r",
									"    pm.environment.set(\"fileNameOnServerCharacteristics\", fileNameOnServer);\r",
									"});\r",
									"console.log(fileNameOnServer);\r",
									"\r",
									"var fileNameByUser\r",
									"pm.test(\"Название файла пользователя\", function(){\r",
									"    fileNameByUser = pm.response.json().data.source_name;\r",
									"    pm.environment.set(\"fileNameByUserCSV\",\"file_name%3D\"+fileNameByUser);\r",
									"    })\r",
									"console.log(\"file_name=\"+fileNameByUser);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomNumber() {\r",
									"    var randomNumber = '';\r",
									"    for (var i = 0; i < 10; i++) {\r",
									"        randomNumber += Math.floor(Math.random() * 10); // Добавляем случайную цифру от 0 до 9\r",
									"    }\r",
									"    return randomNumber;\r",
									"}\r",
									"\r",
									"var randomDigitsNumber = generateRandomNumber();\r",
									"pm.environment.set(\"randomNum\", randomDigitsNumber);\r",
									"\r",
									"console.log(randomDigitsNumber);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "rc",
									"value": "nsi",
									"type": "text"
								},
								{
									"key": "man",
									"value": "in",
									"type": "text"
								},
								{
									"key": "fileToUpload",
									"type": "file",
									"src": "postman-cloud:///1eeeb66f-cab7-4270-bc32-a75d0eede599"
								},
								{
									"key": "num",
									"value": "{{randomNum}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/file/upload",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"file",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "job/2/create -Характеристики",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе, не пустой\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"    pm.expect(jsonData.data).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"/*setTimeout(function(){\r",
									"    pm.sendRequest(\"Следующий запрос\");\r",
									"}, 40000);*/"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/job/2/create?p_state=6&p_file_server={{fileNameOnServerCharacteristics}}&p_parameters={{fileNameByUserCSV}}",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"job",
								"2",
								"create"
							],
							"query": [
								{
									"key": "p_state",
									"value": "6"
								},
								{
									"key": "p_file_server",
									"value": "{{fileNameOnServerCharacteristics}}"
								},
								{
									"key": "p_parameters",
									"value": "{{fileNameByUserCSV}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Сертификаты",
			"item": [
				{
					"name": "Upload_CSV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе, не пустой, название файла соответствует отправленному\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"    pm.expect(jsonData.data).not.to.be.empty;\r",
									"    pm.expect(jsonData.data.source_name).to.be.eql(\"sert138.csv\")\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"var fileNameOnServer;\r",
									"pm.test(\"Получение названия файла на сервере\", \r",
									"    function () {\r",
									"    fileNameOnServer= pm.response.json().data.file_name;\r",
									"    pm.environment.set(\"fileNameOnServerSertif\", fileNameOnServer);\r",
									"});\r",
									"console.log(fileNameOnServer);\r",
									"\r",
									"var fileNameByUser\r",
									"pm.test(\"Название файла пользователя\", function(){\r",
									"    fileNameByUser = pm.response.json().data.source_name;\r",
									"    pm.environment.set(\"fileNameByUserCSV\",\"file_name%3D\"+fileNameByUser);\r",
									"})\r",
									"console.log(\"file_name=\"+fileNameByUser);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomNumber() {\r",
									"    var randomNumber = '';\r",
									"    for (var i = 0; i < 10; i++) {\r",
									"        randomNumber += Math.floor(Math.random() * 10); // Добавляем случайную цифру от 0 до 9\r",
									"    }\r",
									"    return randomNumber;\r",
									"}\r",
									"\r",
									"var randomDigitsNumber = generateRandomNumber();\r",
									"pm.environment.set(\"randomNum\", randomDigitsNumber);\r",
									"\r",
									"console.log(randomDigitsNumber);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "rc",
									"value": "nsi",
									"type": "text"
								},
								{
									"key": "man",
									"value": "in",
									"type": "text"
								},
								{
									"key": "fileToUpload",
									"type": "file",
									"src": "postman-cloud:///1eee29f5-2a70-48e0-8945-5fcf1797d3b2"
								},
								{
									"key": "num",
									"value": "{{randomNum}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/file/upload",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"file",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "job/4/create -Сертификаты",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"    pm.expect(jsonData.data).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/job/4/create?p_state=6&p_file_server={{fileNameOnServerSertif}}&p_parameters={{fileNameByUserCSV}}",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"job",
								"4",
								"create"
							],
							"query": [
								{
									"key": "p_state",
									"value": "6"
								},
								{
									"key": "p_file_server",
									"value": "{{fileNameOnServerSertif}}"
								},
								{
									"key": "p_parameters",
									"value": "{{fileNameByUserCSV}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "job/reports -Недостающие серты",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/job/reports?CurrDirCrRep=sert",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"job",
								"reports"
							],
							"query": [
								{
									"key": "CurrDirCrRep",
									"value": "sert"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Изображения",
			"item": [
				{
					"name": "Upload_CSV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе, не пустой, название файла соотвествует отправленному\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"    pm.expect(jsonData.data).not.to.be.empty;\r",
									"    pm.expect(jsonData.data.source_name).to.be.eql(\"images.csv\")\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"var fileNameOnServer;\r",
									"pm.test(\"Получение названия файла на сервере\", \r",
									"    function () {\r",
									"    fileNameOnServer= pm.response.json().data.file_name;\r",
									"    pm.environment.set(\"fileNameOnServerImage\", fileNameOnServer);\r",
									"});\r",
									"console.log(fileNameOnServer);\r",
									"\r",
									"var fileNameByUser\r",
									"pm.test(\"Название файла пользователя\", function(){\r",
									"    fileNameByUser = pm.response.json().data.source_name;\r",
									"    pm.environment.set(\"fileNameByUserCSV\",\"file_name%3D\"+fileNameByUser);\r",
									"})\r",
									"console.log(\"file_name=\"+fileNameByUser);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomNumber() {\r",
									"    var randomNumber = '';\r",
									"    for (var i = 0; i < 10; i++) {\r",
									"        randomNumber += Math.floor(Math.random() * 10); // Добавляем случайную цифру от 0 до 9\r",
									"    }\r",
									"    return randomNumber;\r",
									"}\r",
									"\r",
									"var randomDigitsNumber = generateRandomNumber();\r",
									"pm.environment.set(\"randomNum\", randomDigitsNumber);\r",
									"\r",
									"console.log(randomDigitsNumber);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "rc",
									"value": "nsi",
									"type": "text"
								},
								{
									"key": "man",
									"value": "in",
									"type": "text"
								},
								{
									"key": "fileToUpload",
									"type": "file",
									"src": "postman-cloud:///1eeec44e-f0d6-4db0-84a3-b5fff81b4667"
								},
								{
									"key": "num",
									"value": "{{randomNum}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/file/upload",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"file",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "job/5/create -Изображения",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе, не пустой\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"    pm.expect(jsonData.data).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/job/5/create?p_state=6&p_file_server={{fileNameOnServerImage}}&p_parameters={{fileNameByUserCSV}}",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"job",
								"5",
								"create"
							],
							"query": [
								{
									"key": "p_state",
									"value": "6"
								},
								{
									"key": "p_file_server",
									"value": "{{fileNameOnServerImage}}"
								},
								{
									"key": "p_parameters",
									"value": "{{fileNameByUserCSV}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Описание",
			"item": [
				{
					"name": "Upload_CSV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус содержит ОК\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе, не пустой, название файла соответствует отправленному\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"     pm.expect(jsonData.data).not.to.be.empty;\r",
									"    pm.expect(jsonData.data.source_name).to.be.eql(\"description.csv\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"var fileNameOnServer;\r",
									"pm.test(\"Получение названия файла на сервере\", \r",
									"    function () {\r",
									"    fileNameOnServer= pm.response.json().data.file_name;\r",
									"    pm.environment.set(\"fileNameOnServerDescription\", fileNameOnServer);\r",
									"});\r",
									"console.log(fileNameOnServer);\r",
									"\r",
									"var fileNameByUser\r",
									"pm.test(\"Название файла пользователя\", function(){\r",
									"    fileNameByUser = pm.response.json().data.source_name;\r",
									"    pm.environment.set(\"fileNameByUserCSV\",\"file_name%3D\"+fileNameByUser);\r",
									"})\r",
									"console.log(\"file_name=\"+fileNameByUser);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomNumber() {\r",
									"    var randomNumber = '';\r",
									"    for (var i = 0; i < 10; i++) {\r",
									"        randomNumber += Math.floor(Math.random() * 10); // Добавляем случайную цифру от 0 до 9\r",
									"    }\r",
									"    return randomNumber;\r",
									"}\r",
									"\r",
									"var randomDigitsNumber = generateRandomNumber();\r",
									"pm.environment.set(\"randomNum\", randomDigitsNumber);\r",
									"\r",
									"console.log(randomDigitsNumber);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "rc",
									"value": "nsi",
									"type": "text"
								},
								{
									"key": "man",
									"value": "in",
									"type": "text"
								},
								{
									"key": "fileToUpload",
									"type": "file",
									"src": "postman-cloud:///1eeec463-71b8-43c0-abea-c6dcc8aca02c"
								},
								{
									"key": "num",
									"value": "{{randomNum}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/file/upload",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"file",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "job/7/create -Описание",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе, не пустой\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"    pm.expect(jsonData.data).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/job/7/create?p_state=6&p_file_server={{fileNameOnServerDescription}}&p_parameters={{fileNameByUserCSV}}",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"job",
								"7",
								"create"
							],
							"query": [
								{
									"key": "p_state",
									"value": "6"
								},
								{
									"key": "p_file_server",
									"value": "{{fileNameOnServerDescription}}"
								},
								{
									"key": "p_parameters",
									"value": "{{fileNameByUserCSV}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Техническая информация",
			"item": [
				{
					"name": "Upload_CSV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе, не пустой, название файла соотвествует отправленному\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"    pm.expect(jsonData.data).not.to.be.empty;\r",
									"    pm.expect(jsonData.data.source_name).to.be.eql(\"tech_info.csv\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"var fileNameOnServer;\r",
									"pm.test(\"Получение названия файла на сервере\", \r",
									"    function () {\r",
									"    fileNameOnServer= pm.response.json().data.file_name;\r",
									"    pm.environment.set(\"fileNameOnServerTechInfo\", fileNameOnServer);\r",
									"});\r",
									"console.log(fileNameOnServer);\r",
									"\r",
									"var fileNameByUser\r",
									"pm.test(\"Название файла пользователя\", function(){\r",
									"    fileNameByUser = pm.response.json().data.source_name;\r",
									"    pm.environment.set(\"fileNameByUserCSV\",\"file_name%3D\"+fileNameByUser);\r",
									"})\r",
									"console.log(\"file_name=\"+fileNameByUser);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomNumber() {\r",
									"    var randomNumber = '';\r",
									"    for (var i = 0; i < 10; i++) {\r",
									"        randomNumber += Math.floor(Math.random() * 10); // Добавляем случайную цифру от 0 до 9\r",
									"    }\r",
									"    return randomNumber;\r",
									"}\r",
									"\r",
									"var randomDigitsNumber = generateRandomNumber();\r",
									"pm.environment.set(\"randomNum\", randomDigitsNumber);\r",
									"\r",
									"console.log(randomDigitsNumber);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "rc",
									"value": "nsi",
									"type": "text"
								},
								{
									"key": "man",
									"value": "in",
									"type": "text"
								},
								{
									"key": "fileToUpload",
									"type": "file",
									"src": "postman-cloud:///1eeeccb1-895a-42c0-af63-454c48319f3f"
								},
								{
									"key": "num",
									"value": "{{randomNum}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/file/upload",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"file",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "job/6/create -Тех.информация",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе, не пустой\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"    pm.expect(jsonData.data).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/job/6/create?p_state=6&p_file_server={{fileNameOnServerTechInfo}}&p_parameters={{fileNameByUserCSV}}",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"job",
								"6",
								"create"
							],
							"query": [
								{
									"key": "p_state",
									"value": "6"
								},
								{
									"key": "p_file_server",
									"value": "{{fileNameOnServerTechInfo}}"
								},
								{
									"key": "p_parameters",
									"value": "{{fileNameByUserCSV}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Цены",
			"item": [
				{
					"name": "Upload_CSV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе, не пустой, название файла соотвествует отправленному\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"    pm.expect(jsonData.data).not.to.be.empty;\r",
									"    pm.expect(jsonData.data.source_name).to.be.eql(\"prices.csv\");\r",
									"});\r",
									"\r",
									"var fileNameOnServer;\r",
									"pm.test(\"Получение названия файла на сервере\", \r",
									"    function () {\r",
									"    fileNameOnServer= pm.response.json().data.file_name;\r",
									"    pm.environment.set(\"fileNameOnServerPrices\", fileNameOnServer);\r",
									"});\r",
									"console.log(fileNameOnServer);\r",
									"\r",
									"var fileNameByUser\r",
									"pm.test(\"Название файла пользователя\", function(){\r",
									"    fileNameByUser = pm.response.json().data.source_name;\r",
									"    pm.environment.set(\"fileNameByUserCSV\",\"file_name%3D\"+fileNameByUser);\r",
									"})\r",
									"console.log(\"file_name=\"+fileNameByUser);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomNumber() {\r",
									"    var randomNumber = '';\r",
									"    for (var i = 0; i < 10; i++) {\r",
									"        randomNumber += Math.floor(Math.random() * 10); // Добавляем случайную цифру от 0 до 9\r",
									"    }\r",
									"    return randomNumber;\r",
									"}\r",
									"\r",
									"var randomDigitsNumber = generateRandomNumber();\r",
									"pm.environment.set(\"randomNum\", randomDigitsNumber);\r",
									"\r",
									"console.log(randomDigitsNumber);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "rc",
									"value": "nsi",
									"type": "text"
								},
								{
									"key": "man",
									"value": "in",
									"type": "text"
								},
								{
									"key": "fileToUpload",
									"type": "file",
									"src": "postman-cloud:///1eeecdd5-d4b7-4d60-855f-97b490a3a754"
								},
								{
									"key": "num",
									"value": "{{randomNum}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/file/upload",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"file",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "job/11/create -Цены",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе, не пустой\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"    pm.expect(jsonData.data).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/job/11/create?p_state=6&p_file_server={{fileNameOnServerPrices}}&p_parameters={{fileNameByUserCSV}}",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"job",
								"11",
								"create"
							],
							"query": [
								{
									"key": "p_state",
									"value": "6"
								},
								{
									"key": "p_file_server",
									"value": "{{fileNameOnServerPrices}}"
								},
								{
									"key": "p_parameters",
									"value": "{{fileNameByUserCSV}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload_CSV PriceList",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе, не пустой, название файла соотвествует отправленному\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"    pm.expect(jsonData.data).not.to.be.empty;\r",
									"    pm.expect(jsonData.data.source_name).to.be.eql(\"prices.csv\");\r",
									"});\r",
									"\r",
									"var fileNameOnServer;\r",
									"pm.test(\"Получение названия файла на сервере\", \r",
									"    function () {\r",
									"    fileNameOnServer= pm.response.json().data.file_name;\r",
									"    pm.environment.set(\"fileNameOnServerPrices\", fileNameOnServer);\r",
									"});\r",
									"console.log(fileNameOnServer);\r",
									"\r",
									"var fileNameByUser\r",
									"pm.test(\"Название файла пользователя\", function(){\r",
									"    fileNameByUser = pm.response.json().data.source_name;\r",
									"    pm.environment.set(\"fileNameByUserCSV\",\"file_name%3D\"+fileNameByUser);\r",
									"})\r",
									"console.log(\"file_name=\"+fileNameByUser);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomNumber() {\r",
									"    var randomNumber = '';\r",
									"    for (var i = 0; i < 10; i++) {\r",
									"        randomNumber += Math.floor(Math.random() * 10); // Добавляем случайную цифру от 0 до 9\r",
									"    }\r",
									"    return randomNumber;\r",
									"}\r",
									"\r",
									"var randomDigitsNumber = generateRandomNumber();\r",
									"pm.environment.set(\"randomNum\", randomDigitsNumber);\r",
									"\r",
									"console.log(randomDigitsNumber);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "rc",
									"value": "nsi",
									"type": "text"
								},
								{
									"key": "man",
									"value": "in",
									"type": "text"
								},
								{
									"key": "fileToUpload",
									"type": "file",
									"src": "postman-cloud:///1ef297ca-6740-46c0-904c-cee890d9dc57"
								},
								{
									"key": "num",
									"value": "{{randomNum}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/file/upload",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"file",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "job/20/create -Прайс-листы",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе, не пустой\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"    pm.expect(jsonData.data).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/job/20/create?p_state=6&p_file_server={{fileNameOnServerPrices}}&p_parameters={{fileNameByUserCSV}}&p_ext_param=client%3D61015",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"job",
								"20",
								"create"
							],
							"query": [
								{
									"key": "p_state",
									"value": "6"
								},
								{
									"key": "p_file_server",
									"value": "{{fileNameOnServerPrices}}"
								},
								{
									"key": "p_parameters",
									"value": "{{fileNameByUserCSV}}"
								},
								{
									"key": "p_ext_param",
									"value": "client%3D61015"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload_CSV Скидка",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе, не пустой, название файла соотвествует отправленному\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"    pm.expect(jsonData.data).not.to.be.empty;\r",
									"    pm.expect(jsonData.data.source_name).to.be.eql(\"prices.csv\");\r",
									"});\r",
									"\r",
									"var fileNameOnServer;\r",
									"pm.test(\"Получение названия файла на сервере\", \r",
									"    function () {\r",
									"    fileNameOnServer= pm.response.json().data.file_name;\r",
									"    pm.environment.set(\"fileNameOnServerPrices\", fileNameOnServer);\r",
									"});\r",
									"console.log(fileNameOnServer);\r",
									"\r",
									"var fileNameByUser\r",
									"pm.test(\"Название файла пользователя\", function(){\r",
									"    fileNameByUser = pm.response.json().data.source_name;\r",
									"    pm.environment.set(\"fileNameByUserCSV\",\"file_name%3D\"+fileNameByUser);\r",
									"})\r",
									"console.log(\"file_name=\"+fileNameByUser);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomNumber() {\r",
									"    var randomNumber = '';\r",
									"    for (var i = 0; i < 10; i++) {\r",
									"        randomNumber += Math.floor(Math.random() * 10); // Добавляем случайную цифру от 0 до 9\r",
									"    }\r",
									"    return randomNumber;\r",
									"}\r",
									"\r",
									"var randomDigitsNumber = generateRandomNumber();\r",
									"pm.environment.set(\"randomNum\", randomDigitsNumber);\r",
									"\r",
									"console.log(randomDigitsNumber);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "rc",
									"value": "nsi",
									"type": "text"
								},
								{
									"key": "man",
									"value": "in",
									"type": "text"
								},
								{
									"key": "fileToUpload",
									"type": "file",
									"src": "postman-cloud:///1ef29808-47fb-4790-bcfa-3809888ac9d5"
								},
								{
									"key": "num",
									"value": "{{randomNum}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/file/upload",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"file",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "job/21/create -Скидки",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе, не пустой\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"    pm.expect(jsonData.data).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/job/21/create?p_state=6&p_file_server={{fileNameOnServerPrices}}&p_parameters={{fileNameByUserCSV}}&p_ext_param=client%3D61015",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"job",
								"21",
								"create"
							],
							"query": [
								{
									"key": "p_state",
									"value": "6"
								},
								{
									"key": "p_file_server",
									"value": "{{fileNameOnServerPrices}}"
								},
								{
									"key": "p_parameters",
									"value": "{{fileNameByUserCSV}}"
								},
								{
									"key": "p_ext_param",
									"value": "client%3D61015"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Аналоги",
			"item": [
				{
					"name": "Upload_CSV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе, не пустой, название файла соотвествует отправленному\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"    pm.expect(jsonData.data).not.to.be.empty;\r",
									"    pm.expect(jsonData.data.source_name).to.be.eql(\"analogs.csv\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"var fileNameOnServer;\r",
									"pm.test(\"Получение названия файла на сервере\", \r",
									"    function () {\r",
									"    fileNameOnServer= pm.response.json().data.file_name;\r",
									"    pm.environment.set(\"fileNameOnServerAnalog\", fileNameOnServer);\r",
									"});\r",
									"console.log(fileNameOnServer);\r",
									"\r",
									"var fileNameByUser\r",
									"pm.test(\"Название файла пользователя\", function(){\r",
									"    fileNameByUser = pm.response.json().data.source_name;\r",
									"    pm.environment.set(\"fileNameByUserCSV\",\"file_name%3D\"+fileNameByUser);\r",
									"})\r",
									"console.log(\"file_name=\"+fileNameByUser);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomNumber() {\r",
									"    var randomNumber = '';\r",
									"    for (var i = 0; i < 10; i++) {\r",
									"        randomNumber += Math.floor(Math.random() * 10); // Добавляем случайную цифру от 0 до 9\r",
									"    }\r",
									"    return randomNumber;\r",
									"}\r",
									"\r",
									"var randomDigitsNumber = generateRandomNumber();\r",
									"pm.environment.set(\"randomNum\", randomDigitsNumber);\r",
									"\r",
									"console.log(randomDigitsNumber);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "rc",
									"value": "nsi",
									"type": "text"
								},
								{
									"key": "man",
									"value": "in",
									"type": "text"
								},
								{
									"key": "fileToUpload",
									"type": "file",
									"src": "postman-cloud:///1eeecdf2-b101-4340-82cb-ab7a404505fc"
								},
								{
									"key": "num",
									"value": "{{randomNum}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/file/upload",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"file",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "job/12/create -Аналоги",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе, не пустой\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"    pm.expect(jsonData.data).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/job/12/create?p_state=6&p_file_server={{fileNameOnServerAnalog}}&p_parameters={{fileNameByUserCSV}}",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"job",
								"12",
								"create"
							],
							"query": [
								{
									"key": "p_state",
									"value": "6"
								},
								{
									"key": "p_file_server",
									"value": "{{fileNameOnServerAnalog}}"
								},
								{
									"key": "p_parameters",
									"value": "{{fileNameByUserCSV}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Конструктор",
			"item": [
				{
					"name": "Upload_CSV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе, не пустой, название файла соотвествует отправленному\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"    pm.expect(jsonData.data).not.to.be.empty;\r",
									"    pm.expect(jsonData.data.source_name).to.be.eql(\"konstructor.csv\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"var fileNameOnServer;\r",
									"pm.test(\"Получение названия файла на сервере\", \r",
									"    function () {\r",
									"    fileNameOnServer= pm.response.json().data.file_name;\r",
									"    pm.environment.set(\"fileNameOnServerKonstruktor\", fileNameOnServer);\r",
									"});\r",
									"console.log(fileNameOnServer);\r",
									"\r",
									"var fileNameByUser\r",
									"pm.test(\"Название файла пользователя\", function(){\r",
									"    fileNameByUser = pm.response.json().data.source_name;\r",
									"    pm.environment.set(\"fileNameByUserCSV\",\"file_name%3D\"+fileNameByUser);\r",
									"})\r",
									"console.log(\"file_name=\"+fileNameByUser);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomNumber() {\r",
									"    var randomNumber = '';\r",
									"    for (var i = 0; i < 10; i++) {\r",
									"        randomNumber += Math.floor(Math.random() * 10); // Добавляем случайную цифру от 0 до 9\r",
									"    }\r",
									"    return randomNumber;\r",
									"}\r",
									"\r",
									"var randomDigitsNumber = generateRandomNumber();\r",
									"pm.environment.set(\"randomNum\", randomDigitsNumber);\r",
									"\r",
									"console.log(randomDigitsNumber);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "rc",
									"value": "nsi",
									"type": "text"
								},
								{
									"key": "man",
									"value": "in",
									"type": "text"
								},
								{
									"key": "fileToUpload",
									"type": "file",
									"src": "postman-cloud:///1eeece05-6ef3-4210-9165-011538997a13"
								},
								{
									"key": "num",
									"value": "{{randomNum}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/file/upload",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"file",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "job/13/create -Конструктор",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе, не пустой\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"    pm.expect(jsonData.data).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/job/13/create?p_state=6&p_file_server={{fileNameOnServerKonstruktor}}&p_parameters={{fileNameByUserCSV}}",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"job",
								"13",
								"create"
							],
							"query": [
								{
									"key": "p_state",
									"value": "6"
								},
								{
									"key": "p_file_server",
									"value": "{{fileNameOnServerKonstruktor}}"
								},
								{
									"key": "p_parameters",
									"value": "{{fileNameByUserCSV}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Однотипные товары",
			"item": [
				{
					"name": "Upload_CSV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе, не пустой, название файла соотвествует отправленному\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"    pm.expect(jsonData.data).not.to.be.empty;\r",
									"    pm.expect(jsonData.data.source_name).to.be.eql(\"sametypes.csv\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"var fileNameOnServer;\r",
									"pm.test(\"Получение названия файла на сервере\", \r",
									"    function () {\r",
									"    fileNameOnServer= pm.response.json().data.file_name;\r",
									"    pm.environment.set(\"fileNameOnServerSametype\", fileNameOnServer);\r",
									"});\r",
									"console.log(fileNameOnServer);\r",
									"\r",
									"var fileNameByUser\r",
									"pm.test(\"Название файла пользователя\", function(){\r",
									"    fileNameByUser = pm.response.json().data.source_name;\r",
									"    pm.environment.set(\"fileNameByUserCSV\",\"file_name%3D\"+fileNameByUser);\r",
									"})\r",
									"console.log(\"file_name=\"+fileNameByUser);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomNumber() {\r",
									"    var randomNumber = '';\r",
									"    for (var i = 0; i < 10; i++) {\r",
									"        randomNumber += Math.floor(Math.random() * 10); // Добавляем случайную цифру от 0 до 9\r",
									"    }\r",
									"    return randomNumber;\r",
									"}\r",
									"\r",
									"var randomDigitsNumber = generateRandomNumber();\r",
									"pm.environment.set(\"randomNum\", randomDigitsNumber);\r",
									"\r",
									"console.log(randomDigitsNumber);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "rc",
									"value": "nsi",
									"type": "text"
								},
								{
									"key": "man",
									"value": "in",
									"type": "text"
								},
								{
									"key": "fileToUpload",
									"type": "file",
									"src": "postman-cloud:///1eeece19-698b-4110-b435-bc074da805f9"
								},
								{
									"key": "num",
									"value": "{{randomNum}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/file/upload",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"file",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "job/14/create -Однотипные товары",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе, не пустой\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"    pm.expect(jsonData.data).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/job/14/create?p_state=6&p_file_server={{fileNameOnServerSametype}}&p_parameters={{fileNameByUserCSV}}",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"job",
								"14",
								"create"
							],
							"query": [
								{
									"key": "p_state",
									"value": "6"
								},
								{
									"key": "p_file_server",
									"value": "{{fileNameOnServerSametype}}"
								},
								{
									"key": "p_parameters",
									"value": "{{fileNameByUserCSV}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Статус товара на складе",
			"item": [
				{
					"name": "Upload_CSV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе, не пустой, название файла соотвествует отправленному\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"    pm.expect(jsonData.data).not.to.be.empty;\r",
									"    pm.expect(jsonData.data.source_name).to.be.eql(\"goods_status.csv\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"var fileNameOnServer;\r",
									"pm.test(\"Получение названия файла на сервере\", \r",
									"    function () {\r",
									"    fileNameOnServer= pm.response.json().data.file_name;\r",
									"    pm.environment.set(\"fileNameOnServerGoodsStatus\", fileNameOnServer);\r",
									"});\r",
									"console.log(fileNameOnServer);\r",
									"\r",
									"var fileNameByUser\r",
									"pm.test(\"Название файла пользователя\", function(){\r",
									"    fileNameByUser = pm.response.json().data.source_name;\r",
									"    pm.environment.set(\"fileNameByUserCSV\",\"file_name%3D\"+fileNameByUser);\r",
									"})\r",
									"console.log(\"file_name=\"+fileNameByUser);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomNumber() {\r",
									"    var randomNumber = '';\r",
									"    for (var i = 0; i < 10; i++) {\r",
									"        randomNumber += Math.floor(Math.random() * 10); // Добавляем случайную цифру от 0 до 9\r",
									"    }\r",
									"    return randomNumber;\r",
									"}\r",
									"\r",
									"var randomDigitsNumber = generateRandomNumber();\r",
									"pm.environment.set(\"randomNum\", randomDigitsNumber);\r",
									"\r",
									"console.log(randomDigitsNumber);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "rc",
									"value": "nsi",
									"type": "text"
								},
								{
									"key": "man",
									"value": "in",
									"type": "text"
								},
								{
									"key": "fileToUpload",
									"type": "file",
									"src": "postman-cloud:///1eeece33-b6a7-4d30-b5f1-97cbd5ca0247"
								},
								{
									"key": "num",
									"value": "{{randomNum}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/file/upload",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"file",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "job/9/create -Статус товара на складе",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе, не пустой\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"    pm.expect(jsonData.data).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/job/9/create?p_state=6&p_file_server={{fileNameOnServerGoodsStatus}}&p_parameters={{fileNameByUserCSV}}",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"job",
								"9",
								"create"
							],
							"query": [
								{
									"key": "p_state",
									"value": "6"
								},
								{
									"key": "p_file_server",
									"value": "{{fileNameOnServerGoodsStatus}}"
								},
								{
									"key": "p_parameters",
									"value": "{{fileNameByUserCSV}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Срок изготовления и доставки",
			"item": [
				{
					"name": "Upload_CSV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе, не пустой, название файла соотвествует отправленному\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"    pm.expect(jsonData.data).not.to.be.empty;\r",
									"    pm.expect(jsonData.data.source_name).to.be.eql(\"delivery_timelines.csv\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"var fileNameOnServer;\r",
									"pm.test(\"Получение названия файла на сервере\", \r",
									"    function () {\r",
									"    fileNameOnServer= pm.response.json().data.file_name;\r",
									"    pm.environment.set(\"fileNameOnServerDeliveryTime\", fileNameOnServer);\r",
									"});\r",
									"console.log(fileNameOnServer);\r",
									"\r",
									"var fileNameByUser\r",
									"pm.test(\"Название файла пользователя\", function(){\r",
									"    fileNameByUser = pm.response.json().data.source_name;\r",
									"    pm.environment.set(\"fileNameByUserCSV\",\"file_name%3D\"+fileNameByUser);\r",
									"})\r",
									"console.log(\"file_name=\"+fileNameByUser);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomNumber() {\r",
									"    var randomNumber = '';\r",
									"    for (var i = 0; i < 10; i++) {\r",
									"        randomNumber += Math.floor(Math.random() * 10); // Добавляем случайную цифру от 0 до 9\r",
									"    }\r",
									"    return randomNumber;\r",
									"}\r",
									"\r",
									"var randomDigitsNumber = generateRandomNumber();\r",
									"pm.environment.set(\"randomNum\", randomDigitsNumber);\r",
									"\r",
									"console.log(randomDigitsNumber);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "rc",
									"value": "nsi",
									"type": "text"
								},
								{
									"key": "man",
									"value": "in",
									"type": "text"
								},
								{
									"key": "fileToUpload",
									"type": "file",
									"src": "postman-cloud:///1eeece46-0b7a-4210-9095-ef0506cf532b"
								},
								{
									"key": "num",
									"value": "{{randomNum}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/file/upload",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"file",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "job/10/create -Срок изготовления",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе, не пустой\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"    pm.expect(jsonData.data).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/job/10/create?p_state=6&p_file_server={{fileNameOnServerDeliveryTime}}&p_parameters={{fileNameByUserCSV}}",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"job",
								"10",
								"create"
							],
							"query": [
								{
									"key": "p_state",
									"value": "6"
								},
								{
									"key": "p_file_server",
									"value": "{{fileNameOnServerDeliveryTime}}"
								},
								{
									"key": "p_parameters",
									"value": "{{fileNameByUserCSV}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Складской ассортимент",
			"item": [
				{
					"name": "Upload_CSV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе, не пустой, название файла соотвествует отправленному\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"    pm.expect(jsonData.data).not.to.be.empty;\r",
									"    pm.expect(jsonData.data.source_name).to.be.eql(\"storage_assortment.csv\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"var fileNameOnServer;\r",
									"pm.test(\"Получение названия файла на сервере\", \r",
									"    function () {\r",
									"    fileNameOnServer= pm.response.json().data.file_name;\r",
									"    pm.environment.set(\"fileNameOnServerAssortment\", fileNameOnServer);\r",
									"});\r",
									"console.log(fileNameOnServer);\r",
									"\r",
									"var fileNameByUser\r",
									"pm.test(\"Название файла пользователя\", function(){\r",
									"    fileNameByUser = pm.response.json().data.source_name;\r",
									"    pm.environment.set(\"fileNameByUserCSV\",\"file_name%3D\"+fileNameByUser);\r",
									"})\r",
									"console.log(\"file_name=\"+fileNameByUser);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomNumber() {\r",
									"    var randomNumber = '';\r",
									"    for (var i = 0; i < 10; i++) {\r",
									"        randomNumber += Math.floor(Math.random() * 10); // Добавляем случайную цифру от 0 до 9\r",
									"    }\r",
									"    return randomNumber;\r",
									"}\r",
									"\r",
									"var randomDigitsNumber = generateRandomNumber();\r",
									"pm.environment.set(\"randomNum\", randomDigitsNumber);\r",
									"\r",
									"console.log(randomDigitsNumber);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "rc",
									"value": "nsi",
									"type": "text"
								},
								{
									"key": "man",
									"value": "in",
									"type": "text"
								},
								{
									"key": "fileToUpload",
									"type": "file",
									"src": "postman-cloud:///1eeece5e-3007-4cf0-b291-33fee6f2da41"
								},
								{
									"key": "num",
									"value": "{{randomNum}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/file/upload",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"file",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "job/8/create -Складской ассортимент",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе, не пустой\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"    pm.expect(jsonData.data).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/job/8/create?p_state=6&p_file_server={{fileNameOnServerAssortment}}&p_parameters={{fileNameByUserCSV}}",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"job",
								"8",
								"create"
							],
							"query": [
								{
									"key": "p_state",
									"value": "6"
								},
								{
									"key": "p_file_server",
									"value": "{{fileNameOnServerAssortment}}"
								},
								{
									"key": "p_parameters",
									"value": "{{fileNameByUserCSV}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "EDI",
			"item": [
				{
					"name": "Upload_TXT",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomNumber() {\r",
									"    var randomNumber = '';\r",
									"    for (var i = 0; i < 10; i++) {\r",
									"        randomNumber += Math.floor(Math.random() * 10); // Добавляем случайную цифру от 0 до 9\r",
									"    }\r",
									"    return randomNumber;\r",
									"}\r",
									"\r",
									"var randomDigitsNumber = generateRandomNumber();\r",
									"pm.environment.set(\"randomNum\", randomDigitsNumber);\r",
									"\r",
									"console.log(randomDigitsNumber);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе, не пустой, название файла соотвествует отправленному\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"    pm.expect(jsonData.data).not.to.be.empty;\r",
									"    pm.expect(jsonData.data.source_name).to.be.eql(\"форма_EDI.txt\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"var fileNameOnServer;\r",
									"pm.test(\"Получение названия файла на сервере\", \r",
									"    function () {\r",
									"    fileNameOnServer= pm.response.json().data.file_name;\r",
									"    pm.environment.set(\"fileNameOnServerEDI\", fileNameOnServer);\r",
									"});\r",
									"console.log(fileNameOnServer);\r",
									"\r",
									"var fileNameByUser\r",
									"pm.test(\"Название файла пользователя\", function(){\r",
									"    fileNameByUser = pm.response.json().data.source_name;\r",
									"    pm.environment.set(\"fileNameByUserTXT\",\"file_name%3D\"+fileNameByUser);\r",
									"})\r",
									"console.log(\"file_name=\"+fileNameByUser);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "rc",
									"value": "nsi",
									"type": "text"
								},
								{
									"key": "man",
									"value": "in",
									"type": "text"
								},
								{
									"key": "fileToUpload",
									"type": "file",
									"src": "postman-cloud:///1eeece7d-c373-4470-9d58-629a65a647f8"
								},
								{
									"key": "num",
									"value": "{{randomNum}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/file/upload",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"file",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "job/15/create -EDI",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе, не пустой\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"    pm.expect(jsonData.data).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/job/15/create?p_state=6&p_file_server={{fileNameOnServerEDI}}&p_parameters={{fileNameByUserTXT}}",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"job",
								"15",
								"create"
							],
							"query": [
								{
									"key": "p_state",
									"value": "6"
								},
								{
									"key": "p_file_server",
									"value": "{{fileNameOnServerEDI}}"
								},
								{
									"key": "p_parameters",
									"value": "{{fileNameByUserTXT}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ЮЗЭДО",
			"item": [
				{
					"name": "Upload_TXT",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomNumber() {\r",
									"    var randomNumber = '';\r",
									"    for (var i = 0; i < 10; i++) {\r",
									"        randomNumber += Math.floor(Math.random() * 10); // Добавляем случайную цифру от 0 до 9\r",
									"    }\r",
									"    return randomNumber;\r",
									"}\r",
									"\r",
									"var randomDigitsNumber = generateRandomNumber();\r",
									"pm.environment.set(\"randomNum\", randomDigitsNumber);\r",
									"\r",
									"console.log(randomDigitsNumber);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе, не пустой, название файла соотвествует отправленному\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"    pm.expect(jsonData.data).not.to.be.empty;\r",
									"    pm.expect(jsonData.data.source_name).to.be.eql(\"форма_UZEDO.txt\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"var fileNameOnServer;\r",
									"pm.test(\"Получение названия файла на сервере\", \r",
									"    function () {\r",
									"    fileNameOnServer= pm.response.json().data.file_name;\r",
									"    pm.environment.set(\"fileNameOnServerUZEDO\", fileNameOnServer);\r",
									"});\r",
									"console.log(fileNameOnServer);\r",
									"\r",
									"var fileNameByUser\r",
									"pm.test(\"Название файла пользователя\", function(){\r",
									"    fileNameByUser = pm.response.json().data.source_name;\r",
									"    pm.environment.set(\"fileNameByUserTXT\",\"file_name%3D\"+fileNameByUser);\r",
									"})\r",
									"console.log(\"file_name=\"+fileNameByUser);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "rc",
									"value": "nsi",
									"type": "text"
								},
								{
									"key": "man",
									"value": "in",
									"type": "text"
								},
								{
									"key": "fileToUpload",
									"type": "file",
									"src": "postman-cloud:///1eeecea4-1c66-4ed0-9812-b3f3e6b4c31b"
								},
								{
									"key": "num",
									"value": "{{randomNum}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/file/upload",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"file",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "job/16/create -ЮЗЭДО",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе, не пустой\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"    pm.expect(jsonData.data).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/job/16/create?p_state=6&p_file_server={{fileNameOnServerUZEDO}}&p_parameters={{fileNameByUserTXT}}&session-id={{sessionId}}",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"job",
								"16",
								"create"
							],
							"query": [
								{
									"key": "p_state",
									"value": "6"
								},
								{
									"key": "p_file_server",
									"value": "{{fileNameOnServerUZEDO}}"
								},
								{
									"key": "p_parameters",
									"value": "{{fileNameByUserTXT}}"
								},
								{
									"key": "session-id",
									"value": "{{sessionId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "EDI Проекты",
			"item": [
				{
					"name": "Upload_TXT",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomNumber() {\r",
									"    var randomNumber = '';\r",
									"    for (var i = 0; i < 10; i++) {\r",
									"        randomNumber += Math.floor(Math.random() * 10); // Добавляем случайную цифру от 0 до 9\r",
									"    }\r",
									"    return randomNumber;\r",
									"}\r",
									"\r",
									"var randomDigitsNumber = generateRandomNumber();\r",
									"pm.environment.set(\"randomNum\", randomDigitsNumber);\r",
									"\r",
									"console.log(randomDigitsNumber);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе, не пустой, название файла соотвествует отправленному\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"    pm.expect(jsonData.data).not.to.be.empty;\r",
									"    pm.expect(jsonData.data.source_name).to.be.eql(\"форма_EDIPROJECT.txt\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"var fileNameOnServer;\r",
									"pm.test(\"Получение названия файла на сервере\", \r",
									"    function () {\r",
									"    fileNameOnServer= pm.response.json().data.file_name;\r",
									"    pm.environment.set(\"fileNameOnServerEDIProject\", fileNameOnServer);\r",
									"});\r",
									"console.log(fileNameOnServer);\r",
									"\r",
									"var fileNameByUser\r",
									"pm.test(\"Название файла пользователя\", function(){\r",
									"    fileNameByUser = pm.response.json().data.source_name;\r",
									"    pm.environment.set(\"fileNameByUserTXT\",\"file_name%3D\"+fileNameByUser);\r",
									"})\r",
									"console.log(\"file_name=\"+fileNameByUser);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "rc",
									"value": "nsi",
									"type": "text"
								},
								{
									"key": "man",
									"value": "in",
									"type": "text"
								},
								{
									"key": "fileToUpload",
									"type": "file",
									"src": "postman-cloud:///1eeed009-869a-4f70-a854-52161f3d035d"
								},
								{
									"key": "num",
									"value": "{{randomNum}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/file/upload",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"file",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "job/17/create -EDI Проекты",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе, не пустой\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"    pm.expect(jsonData.data).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/job/17/create?p_state=6&p_file_server={{fileNameOnServerEDIProject}}&p_parameters={{fileNameByUserTXT}}",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"job",
								"17",
								"create"
							],
							"query": [
								{
									"key": "p_state",
									"value": "6"
								},
								{
									"key": "p_file_server",
									"value": "{{fileNameOnServerEDIProject}}"
								},
								{
									"key": "p_parameters",
									"value": "{{fileNameByUserTXT}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Факторинг",
			"item": [
				{
					"name": "Upload_7Z",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomNumber() {\r",
									"    var randomNumber = '';\r",
									"    for (var i = 0; i < 10; i++) {\r",
									"        randomNumber += Math.floor(Math.random() * 10); // Добавляем случайную цифру от 0 до 9\r",
									"    }\r",
									"    return randomNumber;\r",
									"}\r",
									"\r",
									"var randomDigitsNumber = generateRandomNumber();\r",
									"pm.environment.set(\"randomNum\", randomDigitsNumber);\r",
									"\r",
									"console.log(randomDigitsNumber);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Массив data есть в ответе, не пустой, название файла соотвествует отправленному\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"    pm.expect(jsonData.data).not.to.be.empty;\r",
									"    pm.expect(jsonData.data.source_name).to.be.eql(\"7Z.7z\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"var fileNameOnServer;\r",
									"pm.test(\"Получение названия файла на сервере\", \r",
									"    function () {\r",
									"    fileNameOnServer= pm.response.json().data.file_name;\r",
									"    pm.environment.set(\"fileNameOnServerFactor\", fileNameOnServer);\r",
									"});\r",
									"console.log(fileNameOnServer);\r",
									"\r",
									"var fileNameByUser\r",
									"pm.test(\"Название файла пользователя\", function(){\r",
									"    fileNameByUser = pm.response.json().data.source_name;\r",
									"    pm.environment.set(\"fileNameByUser7Z\",\"file_name%3D\"+fileNameByUser);\r",
									"})\r",
									"console.log(\"file_name=\"+fileNameByUser);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "rc",
									"value": "nsi",
									"type": "text"
								},
								{
									"key": "man",
									"value": "in",
									"type": "text"
								},
								{
									"key": "fileToUpload",
									"type": "file",
									"src": "postman-cloud:///1eee1dc5-b47a-4220-a389-8f6d9e22eec1"
								},
								{
									"key": "num",
									"value": "{{randomNum}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/file/upload",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"file",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "job/18/create -Факторинг",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"    pm.expect(jsonData.data).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"/*setTimeout(function(){\r",
									"    pm.sendRequest(\"Следующий запрос\");\r",
									"}, 60000);*/"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/job/18/create?p_state=6&p_file_server={{fileNameOnServerFactor}}&p_parameters={{fileNameByUser7Z}}",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"job",
								"18",
								"create"
							],
							"query": [
								{
									"key": "p_state",
									"value": "6"
								},
								{
									"key": "p_file_server",
									"value": "{{fileNameOnServerFactor}}"
								},
								{
									"key": "p_parameters",
									"value": "{{fileNameByUser7Z}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Календарь",
			"item": [
				{
					"name": "co_table/pme_state - список статусов встреч",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is a valid JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив rows есть в ответе, не пустой\", function () {\r",
									"    pm.expect(jsonData.data.rows).to.exist;\r",
									"    pm.expect(jsonData.data.rows).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/info/search/co_table/pme_state",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"info",
								"search",
								"co_table",
								"pme_state"
							]
						}
					},
					"response": []
				},
				{
					"name": "search/class/51 - BT98",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is a valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok;\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив rows есть в ответе, не пустой\", function () {\r",
									"    pm.expect(jsonData.data.rows).to.exist;\r",
									"    pm.expect(jsonData.data.rows).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "term",
									"value": "ВТ98",
									"type": "text"
								},
								{
									"key": "len_lim",
									"value": "6",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/info/search/class/51",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"info",
								"search",
								"class",
								"51"
							]
						}
					},
					"response": []
				},
				{
					"name": "search/class/51 - BT99",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is a valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok;\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив rows есть в ответе, не пустой\", function () {\r",
									"    pm.expect(jsonData.data.rows).to.exist;\r",
									"    pm.expect(jsonData.data.rows).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "term",
									"value": "ВТ99",
									"type": "text"
								},
								{
									"key": "len_lim",
									"value": "6",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/info/search/class/51",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"info",
								"search",
								"class",
								"51"
							]
						}
					},
					"response": []
				},
				{
					"name": "info/search/clients/dict",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is a valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok;\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив rows есть в ответе, не пустой\", function () {\r",
									"    pm.expect(jsonData.data.rows).to.exist;\r",
									"    pm.expect(jsonData.data.rows).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/info/search/clients/dict?term=нилед",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"info",
								"search",
								"clients",
								"dict"
							],
							"query": [
								{
									"key": "term",
									"value": "нилед"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "task -Создание встречи",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ быстрее, чем 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var currentDate = new Date();\r",
									"var tomorrowDate = new Date(currentDate);\r",
									"tomorrowDate.setDate(currentDate.getDate() + 1);\r",
									"var formatTomorrowDate = (\"0\" + tomorrowDate.getDate()).slice(-2) + \"/\" + (\"0\" + (tomorrowDate.getMonth() + 1)).slice(-2) + \"/\" + tomorrowDate.getFullYear();\r",
									"pm.environment.set(\"tomorrowDate\", formatTomorrowDate);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "pme_type",
									"value": "ВМ90",
									"type": "text"
								},
								{
									"key": "pme_state",
									"value": "appoint",
									"type": "text"
								},
								{
									"key": "pme_task",
									"value": "тестовая встреча",
									"type": "text"
								},
								{
									"key": "cli-code",
									"value": "51951",
									"type": "text"
								},
								{
									"key": "man-code",
									"value": "9031861,9031861",
									"type": "text"
								},
								{
									"key": "pme_theme",
									"value": "ВТ99",
									"type": "text"
								},
								{
									"key": "pme_datep",
									"value": "{{tomorrowDate}}",
									"type": "text"
								},
								{
									"key": "pme_timep",
									"value": "08:39",
									"type": "text"
								},
								{
									"key": "pmp_class37",
									"value": "00001,00001",
									"type": "text"
								},
								{
									"key": "exm_mancode",
									"value": "104230",
									"type": "text"
								},
								{
									"key": "pme_subtheme",
									"value": "ВТ9910",
									"type": "text"
								},
								{
									"key": "pme_endtimep",
									"value": "11:39",
									"type": "text"
								},
								{
									"key": "pme_extuser",
									"value": "Yes",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/meeting/task",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"meeting",
								"task"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCliTask -Список встреч",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"if (jsonData.data.rows.length > 0) {var idTask = jsonData.data.rows[0].id\r",
									"console.log(idTask)\r",
									"};\r",
									"pm.environment.set(\"idTask\", idTask);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var currentDate = new Date;\r",
									"var firstDayOfCurrentMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\r",
									"var dayOfWeekFirstDayOfCurentMonth = firstDayOfCurrentMonth.getDay();\r",
									"var daysUntilMonday = (dayOfWeekFirstDayOfCurentMonth === 0) ? 6 : (1 - dayOfWeekFirstDayOfCurentMonth);\r",
									"var nearestMonday = new Date(firstDayOfCurrentMonth);\r",
									"nearestMonday.setDate(firstDayOfCurrentMonth.getDate() + daysUntilMonday);\r",
									"var formatDate = (\"0\" + nearestMonday.getDate()).slice(-2) + \"/\" + (\"0\" + (nearestMonday.getMonth() + 1)).slice(-2) + \"/\" + (nearestMonday.getFullYear().toString().slice(-2));\r",
									"pm.environment.set(\"nearestMondayForCalendar\", formatDate);\r",
									"\r",
									"var lastDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);\r",
									"var daysUntilSunday = lastDayOfMonth.getDay();\r",
									"daysUntilSunday = (daysUntilSunday === 0) ? 0 : (7 - daysUntilSunday);\r",
									"var nearestSunday = new Date(lastDayOfMonth);\r",
									"nearestSunday.setDate(lastDayOfMonth.getDate() + daysUntilSunday);\r",
									"var formatNearestSunday = (\"0\" + nearestSunday.getDate()).slice(-2) + \"/\" + (\"0\" + (nearestSunday.getMonth() + 1)).slice(-2) + \"/\" + nearestSunday.getFullYear().toString().slice(-2);\r",
									"pm.environment.set(\"nearestSundayEndOfMonth\", formatNearestSunday);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/meeting/getCliTask?date1={{nearestMondayForCalendar}}&date2={{nearestSundayEndOfMonth}}&rows=100000&page=1",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"meeting",
								"getCliTask"
							],
							"query": [
								{
									"key": "date1",
									"value": "{{nearestMondayForCalendar}}"
								},
								{
									"key": "date2",
									"value": "{{nearestSundayEndOfMonth}}"
								},
								{
									"key": "rows",
									"value": "100000"
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "task -детали встречи",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/meeting/task?pr_meetingRowid={{idTask}}",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"meeting",
								"task"
							],
							"query": [
								{
									"key": "pr_meetingRowid",
									"value": "{{idTask}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "exportCliTask -Экспорт списка встреч",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ приходит меньше, чем через 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var currentDate = new Date();\r",
									"var firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\r",
									"var formatFirstDayOfMonth = (\"0\" + firstDayOfMonth.getDate()).slice(-2) + \"/\" + (\"0\" + (firstDayOfMonth.getMonth() + 1)).slice(-2) + \"/\" + firstDayOfMonth.getFullYear();\r",
									"pm.environment.set(\"firstDayOfMonth\", formatFirstDayOfMonth);\r",
									"\r",
									"var lastDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);\r",
									"var formatLastDayOfMonth = (\"0\" + lastDayOfMonth.getDate()).slice(-2) + \"/\" + (\"0\" + (lastDayOfMonth.getMonth() + 1)).slice(-2) + \"/\" + lastDayOfMonth.getFullYear();\r",
									"pm.environment.set(\"lastDayOfMonth\", formatLastDayOfMonth);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/meeting/exportCliTask?date1={{firstDayOfMonth}}&date2={{lastDayOfMonth}}",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"meeting",
								"exportCliTask"
							],
							"query": [
								{
									"key": "date1",
									"value": "{{firstDayOfMonth}}"
								},
								{
									"key": "date2",
									"value": "{{lastDayOfMonth}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getEXPLink -Ссылка на календарь",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ меньше, чем за 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var currentDate = new Date;\r",
									"var curentHour = currentDate.getHours();\r",
									"pm.environment.set(\"curentHour\", curentHour);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/meeting/getEXPLink?current_hour={{curentHour}}",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"meeting",
								"getEXPLink"
							],
							"query": [
								{
									"key": "current_hour",
									"value": "{{curentHour}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Проектная работа",
			"item": [
				{
					"name": "cladr",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is a valid JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе, не пустой\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"    pm.expect(jsonData.data).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ быстрее 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/info/cladr?matches=true&clicode=2",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"info",
								"cladr"
							],
							"query": [
								{
									"key": "matches",
									"value": "true"
								},
								{
									"key": "clicode",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "help/obj12-список стадий проектов",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is a valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok;\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив rows есть в ответе, не пустой\", function () {\r",
									"    pm.expect(jsonData.data.rows).to.exist;\r",
									"    pm.expect(jsonData.data.rows).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/info/search/help/obj12",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"info",
								"search",
								"help",
								"obj12"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login_User_For_ListReq",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\", \r",
									"    function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is a valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"pm.test(\"У поставщика dostuplkp='on'\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.rights.dostuplkp).to.eql(\"on\");\r",
									"})\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"var sessionId;\r",
									"pm.test(\"Get sessionId for tests\", \r",
									"    function () {\r",
									"    sessionId = pm.response.json().data.session;\r",
									"    pm.environment.set(\"sessionIdForListReq\", sessionId);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "log",
									"value": "8536cka",
									"type": "text"
								},
								{
									"key": "pwd",
									"value": "mvla3255",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/user/login",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPrjListReq - Запросы по проектам",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"});\r",
									"\r",
									"var idProject = jsonData.data.rows[1].id;\r",
									"pm.environment.set(\"idProjectReq\", idProject);\r",
									"\r",
									"pm.test(\"Response time is less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionIdForListReq}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/project/getPrjListReq",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"project",
								"getPrjListReq"
							]
						}
					},
					"response": []
				},
				{
					"name": "getSubPrj/{id}  -Запросы по проектам",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ приходит меньше, чем через 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"var extCodeProject = jsonData.data.rows[0].extCode;\r",
									"//pm.environment.set(\"idProject\", idProject);\r",
									"console.log(extCodeProject);\r",
									"\r",
									"var manCode = jsonData.data.rows[0].lpr_list[0].exm_mancode;\r",
									"pm.environment.set(\"manCodeReqPr\", manCode);\r",
									"console.log(manCode);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionIdForListReq}}"
							}
						],
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/project/getSubPrj/{{idProjectReq}}",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"project",
								"getSubPrj",
								"{{idProjectReq}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "setExtSubPrj - Запрос по проекту -отправка",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ приходит меньше, чем через 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionIdForListReq}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "requestNum",
									"value": "123",
									"type": "text"
								},
								{
									"key": "extCode",
									"value": "45678",
									"type": "text"
								},
								{
									"key": "extName",
									"value": "ТЕСТ",
									"type": "text"
								},
								{
									"key": "extStatus",
									"value": "Без статуса",
									"type": "text"
								},
								{
									"key": "exm_mancode",
									"value": "{{manCodeReqPr}}",
									"type": "text"
								},
								{
									"key": "extDateCreate",
									"value": "04/03/24",
									"type": "text"
								},
								{
									"key": "extDateChange",
									"value": "06/03/24",
									"type": "text"
								},
								{
									"key": "extCRMDateCreate",
									"value": "20/03/24",
									"type": "text"
								},
								{
									"key": "extComment",
									"value": "Комментарий",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/project/setExtSubPrj/{{idProjectReq}}",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"project",
								"setExtSubPrj",
								"{{idProjectReq}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getSubPrjList - Проекты",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ приходит меньше, чем через 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"var idProject = jsonData.data.rows[0].id;\r",
									"pm.environment.set(\"idProject\", idProject);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/project/getSubPrjList?rows=10&page=1",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"project",
								"getSubPrjList"
							],
							"query": [
								{
									"key": "rows",
									"value": "10"
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getSubPrj/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ приходит меньше, чем через 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"var extCodeProject = jsonData.data.rows[0].extCode;\r",
									"//pm.environment.set(\"idProject\", idProject);\r",
									"console.log(extCodeProject);\r",
									"\r",
									"var fio = \"Тимофеева Елена Сергеевна\";\r",
									"for (var i=0; i< jsonData.data.rows[0].lpr_list.length; i++ ){\r",
									"if (jsonData.data.rows[0].lpr_list[i].fio ===fio){\r",
									"//console.log(i);\r",
									"break;}\r",
									"}\r",
									"\r",
									"var manCode = jsonData.data.rows[0].lpr_list[i].exm_mancode;\r",
									"pm.environment.set(\"manCode\", manCode);\r",
									"console.log(manCode);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}"
							}
						],
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/project/getSubPrj/{{idProject}}",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"project",
								"getSubPrj",
								"{{idProject}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "setExtSubPrj - Изменения в проект",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе, не пустой\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"    pm.expect(jsonData.data).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ приходит меньше, чем через 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "exm_mancode",
									"value": "{{manCode}}",
									"type": "text"
								},
								{
									"key": "extCode",
									"value": "110011",
									"type": "text"
								},
								{
									"key": "extStatus",
									"value": "Совместный проект",
									"type": "text"
								},
								{
									"key": "extDateChange",
									"value": "20/02/24",
									"type": "text"
								},
								{
									"key": "extDateCreate",
									"value": "22/03/24",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/project/setExtSubPrj/{{idProject}}",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"project",
								"setExtSubPrj",
								"{{idProject}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Акты сверки",
			"item": [
				{
					"name": "client/act - создание акта сверки",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"pm.test(\"Ответ быстрее 40000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(90000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var currentDate = new Date();\r",
									"var firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\r",
									"var year = firstDayOfMonth.getFullYear();\r",
									"var month = (\"0\" + (firstDayOfMonth.getMonth() + 1)).slice(-2);\r",
									"var firstDay =(\"0\" + firstDayOfMonth.getDate()).slice(-2);\r",
									"var formatFirstDayOfMonth = year + \"-\" + month + \"-\" + firstDay;\r",
									"pm.environment.set(\"firstDayOfMonthForAct\", formatFirstDayOfMonth);\r",
									"\r",
									"var lastDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);\r",
									"var lastDay = lastDayOfMonth.getDate();\r",
									"var formatLastDayOfMonth = year + \"-\" + month + \"-\" + lastDay;\r",
									"pm.environment.set(\"lastDayOfMonthForAct\", formatLastDayOfMonth);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}"
							}
						],
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/client/act?OrganizationCode=202&StartDate={{firstDayOfMonthForAct}}&EndDate={{lastDayOfMonthForAct}}",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"client",
								"act"
							],
							"query": [
								{
									"key": "OrganizationCode",
									"value": "202"
								},
								{
									"key": "StartDate",
									"value": "{{firstDayOfMonthForAct}}"
								},
								{
									"key": "EndDate",
									"value": "{{lastDayOfMonthForAct}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "act - Акты сверки",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус содержит ОК\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"pm.test(\"Ответ быстрее 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/client/act?OrganizationCode=202&StartDate={{firstDayOfMonthForAct}}&EndDate={{lastDayOfMonthForAct}}",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"client",
								"act"
							],
							"query": [
								{
									"key": "OrganizationCode",
									"value": "202"
								},
								{
									"key": "StartDate",
									"value": "{{firstDayOfMonthForAct}}"
								},
								{
									"key": "EndDate",
									"value": "{{lastDayOfMonthForAct}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Помощь",
			"item": [
				{
					"name": "help_oneteam_type-список Помощи",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус содержит ОК\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is a valid JSON\", function () {\r",
									"    pm.response.to.be.json; // Проверяем, что ответ в формате JSON\r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; // Пытаемся распарсить ответ\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив rows есть в ответе, не пустой\", function () {\r",
									"    pm.expect(jsonData.data.rows).to.exist;\r",
									"    pm.expect(jsonData.data.rows).to.not.be.empty;\r",
									"});\r",
									"\r",
									"/*var targetCode = \"25\";\r",
									"var targetValue = null;\r",
									"for (var i = 0; i < jsonData.data.rows.length; i++){\r",
									"    if(jsonData.data.rows[i].code === targetCode){\r",
									"        targetValue = jsonData.data.rows[i].value;\r",
									"        break;\r",
									"        }\r",
									"}\r",
									"console.log(targetValue);*/"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/info/search/co_table/help_oneteam_type",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"info",
								"search",
								"co_table",
								"help_oneteam_type"
							]
						}
					},
					"response": []
				},
				{
					"name": "mail/send",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус содержит ОК\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "target_mail",
									"value": "timofeeva_ese@etm.ru",
									"type": "text"
								},
								{
									"key": "subject",
									"value": "ТЕСТ Постман",
									"type": "text"
								},
								{
									"key": "content",
									"value": "<p><strong>Браузер </strong>Google Chrome</p><p><strong>E-mail </strong>posazho@test.com</p><p><strong>Описание вопроса: </strong>ТЕСТ!!!</p>",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/mail/send",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"mail",
								"send"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Анкета поставщика",
			"item": [
				{
					"name": "class/81 - классификатор",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус содержит ОК\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://idev.etm.ru/api/ipro/info/class/81?city=77",
							"protocol": "https",
							"host": [
								"idev",
								"etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"info",
								"class",
								"81"
							],
							"query": [
								{
									"key": "city",
									"value": "77"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "type_merchant-список категорий организаций",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус содержит ОК\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is a valid JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив rows есть в ответе, не пустой\", function () {\r",
									"    pm.expect(jsonData.data.rows).to.exist;\r",
									"    pm.expect(jsonData.data.rows).to.not.be.empty;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://idev.etm.ru/api/ipro/info/search/co_table/type_merchant",
							"protocol": "https",
							"host": [
								"idev",
								"etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"info",
								"search",
								"co_table",
								"type_merchant"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload_TXT - Анкета",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomNumber() {\r",
									"    var randomNumber = '';\r",
									"    for (var i = 0; i < 10; i++) {\r",
									"        randomNumber += Math.floor(Math.random() * 10); // Добавляем случайную цифру от 0 до 9\r",
									"    }\r",
									"    return randomNumber;\r",
									"}\r",
									"\r",
									"var randomDigitsNumber = generateRandomNumber();\r",
									"pm.environment.set(\"randomNum\", randomDigitsNumber);\r",
									"\r",
									"console.log(randomDigitsNumber);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус содержит ОК\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"});\r",
									"\r",
									"var fileName;\r",
									"pm.test(\"Получение названия файла на сервере\", \r",
									"    function () {\r",
									"    fileName= pm.response.json().data.file_name;\r",
									"    pm.environment.set(\"fileNameVendorFormOnServer\", fileName);\r",
									"});\r",
									"console.log(fileName);\r",
									"\r",
									"var fileNameVendorForm;\r",
									"pm.test(\"Получение названия файла для карточки контрагента\", \r",
									"    function () {\r",
									"    fileNameVendorForm= pm.response.json().data.source_name;\r",
									"    pm.environment.set(\"fileNameVendorForm\", fileNameVendorForm);\r",
									"});\r",
									"console.log(fileNameVendorForm);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "rc",
									"value": "cli_document",
									"type": "text"
								},
								{
									"key": "fileToUpload",
									"type": "file",
									"src": "postman-cloud:///1eee50db-071f-4d20-9ebd-a005054e11b1"
								},
								{
									"key": "num",
									"value": "{{randomNum}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/file/upload",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"file",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "docUpload - Анкета",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус содержит ОК\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "cliUploadedCat",
									"value": "MNFDOCS",
									"type": "text"
								},
								{
									"key": "file",
									"value": "{{fileNameVendorFormOnServer}}",
									"type": "text"
								},
								{
									"key": "name",
									"value": "{{fileNameVendorForm}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/client/docUpload",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"client",
								"docUpload"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Договор поставщика",
			"item": [
				{
					"name": "/co_table/form_gov",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус содержит ОК\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is a valid JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив rows есть в ответе, не пустой\", function () {\r",
									"    pm.expect(jsonData.data.rows).to.exist;\r",
									"    pm.expect(jsonData.data.rows).to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/info/search/co_table/form_gov",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"info",
								"search",
								"co_table",
								"form_gov"
							]
						}
					},
					"response": []
				},
				{
					"name": "co_table/right_to_sign",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус содержит ОК\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is a valid JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив rows есть в ответе, не пустой\", function () {\r",
									"    pm.expect(jsonData.data.rows).to.exist;\r",
									"    pm.expect(jsonData.data.rows).to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/info/search/co_table/right_to_sign",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"info",
								"search",
								"co_table",
								"right_to_sign"
							]
						}
					},
					"response": []
				},
				{
					"name": "co_table/edi_transition_way",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус содержит ОК\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is a valid JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив rows есть в ответе, не пустой\", function () {\r",
									"    pm.expect(jsonData.data.rows).to.exist;\r",
									"    pm.expect(jsonData.data.rows).to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/info/search/co_table/edi_transition_way",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"info",
								"search",
								"co_table",
								"edi_transition_way"
							]
						}
					},
					"response": []
				},
				{
					"name": "co_table/goods_transition_way",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус содержит ОК\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is a valid JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив rows есть в ответе, не пустой\", function () {\r",
									"    pm.expect(jsonData.data.rows).to.exist;\r",
									"    pm.expect(jsonData.data.rows).to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/info/search/co_table/goods_transition_way",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"info",
								"search",
								"co_table",
								"goods_transition_way"
							]
						}
					},
					"response": []
				},
				{
					"name": "creVendorContract",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус содержит ОК\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is a valid JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе, не пустой\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"    pm.expect(jsonData.data).to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//enddate: 18/03/2025 - сегодня +365 дней\r",
									"// date_price_regulation  - сегодня +375 дней\r",
									"// date_z_req - begdate +375 дней\r",
									"var currentDate = new Date();\r",
									"var formatToday = (\"0\" + currentDate.getDate()).slice(-2) + \"/\" + (\"0\" + (currentDate.getMonth() + 1)).slice(-2) + \"/\" + currentDate.getFullYear();\r",
									"pm.environment.set(\"today\", formatToday);\r",
									"\r",
									"var tomorrowDate = new Date(currentDate);\r",
									"tomorrowDate.setDate(currentDate.getDate() + 1);\r",
									"var formatTomorrowDate = (\"0\" + tomorrowDate.getDate()).slice(-2) + \"/\" + (\"0\" + (tomorrowDate.getMonth() + 1)).slice(-2) + \"/\" + tomorrowDate.getFullYear();\r",
									"pm.environment.set(\"tomorrowDate\", formatTomorrowDate);\r",
									"\r",
									"var enddate = new Date(currentDate);\r",
									"enddate.setDate(enddate.getDate()+365);\r",
									"var formatEnddate = (\"0\" + enddate.getDate()).slice(-2) + \"/\" + (\"0\" + (enddate.getMonth() + 1)).slice(-2) + \"/\" + enddate.getFullYear();\r",
									"pm.environment.set(\"enddateVendorContract\", formatEnddate);\r",
									"\r",
									"var datePriceRegulation = new Date(enddate);\r",
									"datePriceRegulation.setDate(datePriceRegulation.getDate()+10);\r",
									"var formatDatePriceRegulation = (\"0\" + datePriceRegulation.getDate()).slice(-2) + \"/\" + (\"0\" + (datePriceRegulation.getMonth() + 1)).slice(-2) + \"/\" + datePriceRegulation.getFullYear();\r",
									"pm.environment.set(\"datePriceRegulation\", formatDatePriceRegulation);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "pay_delay",
									"value": "90",
									"type": "text"
								},
								{
									"key": "begdate",
									"value": "{{today}}",
									"type": "text"
								},
								{
									"key": "enddate",
									"value": "{{enddateVendorContract}}",
									"type": "text"
								},
								{
									"key": "date_price_regulation",
									"value": "{{datePriceRegulation}}",
									"type": "text"
								},
								{
									"key": "date_z_req",
									"value": "{{datePriceRegulation}}",
									"type": "text"
								},
								{
									"key": "electronic_arrival",
									"value": "-{{tomorrowDate}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://idev.etm.ru/api/ipro/client/creVendorContract",
							"protocol": "https",
							"host": [
								"idev",
								"etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"client",
								"creVendorContract"
							]
						}
					},
					"response": []
				},
				{
					"name": "pdf/create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус содержит ОК\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is a valid JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе, не пустой\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"    pm.expect(jsonData.data).to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<root>\r\n  <informationEntity>\r\n    <managment>ИП на упрощённой системе налогообложения (УСН))</managment>\r\n    <orgName>АО ''Диэлектрические кабельные системы''</orgName>\r\n    <kpp>695001001</kpp>\r\n    <inn>6905062011</inn>\r\n    <ogrn>34567890</ogrn>\r\n    <merchContractName>51951-Пост-20240322</merchContractName>\r\n    <merchContractData>{{tomorrowDate}}</merchContractData>\r\n  </informationEntity>\r\n  <agreement>\r\n    <fioSignatory> Иванов</fioSignatory>\r\n    <positionSignatory>Руководитель</positionSignatory>\r\n    <fioProps>Иванова</fioProps>\r\n    <positionProps>Руководителя</positionProps>\r\n    <emailMerch>test@test.ru</emailMerch>\r\n    <legalAddress>Пермь</legalAddress>\r\n    <actualAddress>Санкт-Петербург</actualAddress>\r\n    <rightToSign>Доверенности</rightToSign>\r\n    <number>12345678</number>\r\n    <date>06-03-2024</date>\r\n  </agreement>\r\n  <bankDetails>\r\n    <bik>234567</bik>\r\n    <nameBank>Сбер</nameBank>\r\n    <correspondentAccount>32456</correspondentAccount>\r\n    <currentAccount>98765</currentAccount>\r\n  </bankDetails>\r\n  <attach1>\r\n    <deferment>89</deferment>\r\n    <table1>\r\n      <row>\r\n        <group>Товарная группа</group>\r\n        <name>Наименование товара</name>\r\n        <disk>9</disk>\r\n      </row>\r\n    </table1>\r\n  </attach1>\r\n  <attach2>\r\n    <table1>\r\n      <imageGood>\r\n        <date>26-03-2024</date>\r\n        <transfer>Модуль 1С</transfer>\r\n      </imageGood>\r\n      <configurator>\r\n        <date>27-03-2024</date>\r\n        <transfer>iPRO OneTeam</transfer>\r\n      </configurator>\r\n      <technicalInfo>\r\n        <date>29-03-2024</date>\r\n        <transfer>API</transfer>\r\n      </technicalInfo>\r\n      <currentCertificates>\r\n        <date>27-03-2024</date>\r\n        <transfer>Модуль 1С</transfer>\r\n      </currentCertificates>\r\n      <productDescription>\r\n        <date>28-03-2024</date>\r\n        <transfer>iPRO OneTeam</transfer>\r\n      </productDescription>\r\n      <additionalImageGood>\r\n        <date>05-04-2024</date>\r\n        <transfer>Модуль 1С</transfer>\r\n      </additionalImageGood>\r\n      <videoMaterials>\r\n        <date>06-04-2024</date>\r\n        <transfer>API</transfer>\r\n      </videoMaterials>\r\n      <modelTechnicalInfo>\r\n        <date>06-04-2024</date>\r\n        <transfer>API</transfer>\r\n      </modelTechnicalInfo>\r\n      <constructor>\r\n        <date>29-03-2024</date>\r\n        <transfer>API</transfer>\r\n      </constructor>\r\n      <productAnalogues>\r\n        <date>28-03-2024</date>\r\n        <transfer>API</transfer>\r\n      </productAnalogues>\r\n      <similarProducts>\r\n        <date>05-04-2024</date>\r\n        <transfer>iPRO OneTeam</transfer>\r\n      </similarProducts>\r\n      <characteristicsDatabase>\r\n        <date>03-04-2024</date>\r\n        <transfer>Модуль 1С</transfer>\r\n      </characteristicsDatabase>\r\n    </table1>\r\n    <table2>\r\n      <electronicArrival>\r\n        <startDate>27-03-2024</startDate>\r\n        <launchDate>01-04-2024</launchDate>\r\n        <transfer>Провайдер Контур</transfer>\r\n      </electronicArrival>\r\n      <electronicOrder>\r\n        <startDate>27-03-2024</startDate>\r\n        <launchDate>03-04-2024</launchDate>\r\n        <transfer>Провайдер LeraData</transfer>\r\n      </electronicOrder>\r\n      <confirmOrder>\r\n        <startDate>26-03-2024</startDate>\r\n        <launchDate>22-03-2024</launchDate>\r\n        <transfer>Провайдер Тензор</transfer>\r\n      </confirmOrder>\r\n      <nomenclatureFileRemains>\r\n        <startDate>28-03-2024</startDate>\r\n        <launchDate>27-03-2024</launchDate>\r\n        <transfer>Провайдер CISLINK</transfer>\r\n      </nomenclatureFileRemains>\r\n      <nomenclatureFilePrice>\r\n        <startDate>29-03-2024</startDate>\r\n        <launchDate>29-03-2024</launchDate>\r\n        <transfer>Своя разработка</transfer>\r\n      </nomenclatureFilePrice>\r\n      <estimatedDelivery>\r\n        <startDate>30-03-2024</startDate>\r\n        <launchDate>29-03-2024</launchDate>\r\n        <transfer>Провайдер LeraData</transfer>\r\n      </estimatedDelivery>\r\n      <specialConditions>\r\n        <startDate>28-03-2024</startDate>\r\n        <launchDate>29-03-2024</launchDate>\r\n        <transfer>Провайдер LeraData</transfer>\r\n      </specialConditions>\r\n      <nomenclatureFileCharacteristics>\r\n        <startDate>29-03-2024</startDate>\r\n        <launchDate>27-03-2024</launchDate>\r\n        <transfer>Модуль EDI ЭТМ</transfer>\r\n      </nomenclatureFileCharacteristics>\r\n    </table2>\r\n    <table3>\r\n      <upd>\r\n        <startDate>28-03-2024</startDate>\r\n        <launchDate>28-03-2024</launchDate>\r\n      </upd>\r\n      <actServices>\r\n        <startDate>23-03-2024</startDate>\r\n        <launchDate>27-03-2024</launchDate>\r\n      </actServices>\r\n      <ukd>\r\n        <startDate>27-03-2024</startDate>\r\n        <launchDate>27-03-2024</launchDate>\r\n      </ukd>\r\n      <additionalAgreements>\r\n        <startDate>27-03-2024</startDate>\r\n        <launchDate>27-03-2024</launchDate>\r\n      </additionalAgreements>\r\n      <specification>\r\n        <startDate>26-03-2024</startDate>\r\n        <launchDate>28-03-2024</launchDate>\r\n      </specification>\r\n      <powersAttorney>\r\n        <startDate>26-03-2024</startDate>\r\n        <launchDate>29-03-2024</launchDate>\r\n      </powersAttorney>\r\n      <actReconciliation>\r\n        <startDate>31-03-2024</startDate>\r\n        <launchDate>30-03-2024</launchDate>\r\n      </actReconciliation>\r\n      <actReport>\r\n        <startDate>02-04-2024</startDate>\r\n        <launchDate>27-03-2024</launchDate>\r\n      </actReport>\r\n      <actDiscrepancy>\r\n        <startDate>29-03-2024</startDate>\r\n        <launchDate>29-03-2024</launchDate>\r\n      </actDiscrepancy>\r\n    </table3>\r\n    <lprtable1>\r\n      <row>\r\n        <fio>Тест</fio>\r\n        <position>Тест</position>\r\n        <phoneOrEmail>Тест</phoneOrEmail>\r\n      </row>\r\n    </lprtable1>\r\n    <lprtable2>\r\n      <row>\r\n        <fio>Тест</fio>\r\n        <position>Тест</position>\r\n        <phoneOrEmail>Тест</phoneOrEmail>\r\n      </row>\r\n    </lprtable2>\r\n    <lprtable3>\r\n      <row>\r\n        <fio>Тест</fio>\r\n        <position>Тест</position>\r\n        <phoneOrEmail>Тест</phoneOrEmail>\r\n      </row>\r\n    </lprtable3>\r\n    <lprtable4>\r\n      <row>\r\n        <fio>Тест</fio>\r\n        <position>Тест</position>\r\n        <phoneOrEmail>Тест</phoneOrEmail>\r\n      </row>\r\n    </lprtable4>\r\n    <supplierStartDate>24-03-2024</supplierStartDate>\r\n  </attach2>\r\n</root>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "https://idev.etm.ru/api/ipro/fop/pdf/create?xsl=merch_contract&copyto=lkp_files%2Fcontractsmnf&copyxml=yes",
							"protocol": "https",
							"host": [
								"idev",
								"etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"fop",
								"pdf",
								"create"
							],
							"query": [
								{
									"key": "xsl",
									"value": "merch_contract"
								},
								{
									"key": "copyto",
									"value": "lkp_files%2Fcontractsmnf"
								},
								{
									"key": "copyxml",
									"value": "yes"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Заказы",
			"item": [
				{
					"name": "invoice_status -Заказы",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"    pm.expect(jsonData.data).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"Ответ меньше, чем 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sesion-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/info/param/invoice_status?group=m1",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"info",
								"param",
								"invoice_status"
							],
							"query": [
								{
									"key": "group",
									"value": "m1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "invoice -Заказы",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var currentDate = new Date();\r",
									"var formatToday = (\"0\" + currentDate.getDate()).slice(-2) + \"-\" + (\"0\" + (currentDate.getMonth() + 1)).slice(-2) + \"-\" + currentDate.getFullYear();\r",
									"pm.environment.set(\"todayInvoice\", formatToday);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ меньше, чем 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/invoice?d1={{lastMonthDate}}&d2={{todayInvoice}}&sord=desc&sidx=inv-date&page=1&rows=10&group=m1",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"invoice"
							],
							"query": [
								{
									"key": "d1",
									"value": "{{lastMonthDate}}"
								},
								{
									"key": "d2",
									"value": "{{todayInvoice}}"
								},
								{
									"key": "sord",
									"value": "desc"
								},
								{
									"key": "sidx",
									"value": "inv-date"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "rows",
									"value": "10"
								},
								{
									"key": "group",
									"value": "m1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Аналитика",
			"item": [
				{
					"name": "job/reports -Аналитика",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/job/reports",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"job",
								"reports"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Акты за услуги",
			"item": [
				{
					"name": "invoice_status -Акты за услуги",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"    pm.expect(jsonData.data).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"Ответ меньше, чем 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/info/param/invoice_status?group=m2",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"info",
								"param",
								"invoice_status"
							],
							"query": [
								{
									"key": "group",
									"value": "m2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "invoice - Акты за услуги",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var currentDate = new Date();\r",
									"var year = currentDate.getFullYear();\r",
									"var month = (\"0\" + (currentDate.getMonth() + 1)).slice(-2);\r",
									"var today =(\"0\" + currentDate.getDate()).slice(-2);\r",
									"var formatToday = today + \"-\" + month + \"-\" + year;\r",
									"pm.environment.set(\"todayForAct\", formatToday);\r",
									"console.log(formatToday);\r",
									"\r",
									"var lastYearDate = new Date(currentDate);\r",
									"lastYearDate.setFullYear(currentDate.getFullYear()-1);\r",
									"var lastYear = lastYearDate.getFullYear();\r",
									"var lastYearMonth = (\"0\" + (lastYearDate.getMonth()+1)).slice(-2);\r",
									"var lastYearDay = (\"0\" + lastYearDate.getDate()).slice(-2);\r",
									"var formatLastYearDate = lastYearDay + \"-\" + lastYearMonth + \"-\" + lastYear;\r",
									"pm.environment.set(\"lastYearDayForAct\", formatLastYearDate);\r",
									"console.log(formatLastYearDate);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе валидный JSON\", function () {\r",
									"    pm.response.to.be.json; \r",
									"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Массив data есть в ответе\", function () {\r",
									"    pm.expect(jsonData.data).to.exist;\r",
									"});\r",
									"\r",
									"setTimeout(function(){\r",
									"    pm.sendRequest(\"Следующий запрос\");\r",
									"}, 60000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{host}}etm.ru/api/ipro/invoice?d1={{lastYearDayForAct}}&d2={{todayForAct}}&sord=desc&sidx=inv-date&page=1&rows=10&group=m2",
							"protocol": "https",
							"host": [
								"{{host}}etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"invoice"
							],
							"query": [
								{
									"key": "d1",
									"value": "{{lastYearDayForAct}}"
								},
								{
									"key": "d2",
									"value": "{{todayForAct}}"
								},
								{
									"key": "sord",
									"value": "desc"
								},
								{
									"key": "sidx",
									"value": "inv-date"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "rows",
									"value": "10"
								},
								{
									"key": "group",
									"value": "m2"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "job/3 -Новые товары",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"В ответе валидный JSON\", function () {\r",
							"    pm.response.to.be.json; \r",
							"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Массив ob_File есть в ответе\", function () {\r",
							"    pm.expect(jsonData.data.rows[0].ob_File).to.exist;\r",
							"    });\r",
							"\r",
							"var newGoodsFile = pm.environment.get(\"newgoodsfile\");\r",
							"var fileNameOnServer = pm.environment.get(\"fileNameOnServerNewGoods\");\r",
							"pm.test(\"ССылка на загруженный файл присутствует\", function () {\r",
							"    pm.expect(jsonData.data.rows[0].ob_File[0].name).to.eql(newGoodsFile);\r",
							"    pm.expect(jsonData.data.rows[0].ob_File[0].URL).not.to.be.empty;\r",
							"    pm.expect(jsonData.data.rows[0].org_server).to.eql(fileNameOnServer);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "session-id",
						"value": "{{sessionId}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{host}}etm.ru/api/ipro/job/3?sord=desc&d1={{lastMonthDate}}&page=1&rows=10&sidx=datetime",
					"protocol": "https",
					"host": [
						"{{host}}etm",
						"ru"
					],
					"path": [
						"api",
						"ipro",
						"job",
						"3"
					],
					"query": [
						{
							"key": "sord",
							"value": "desc"
						},
						{
							"key": "d1",
							"value": "{{lastMonthDate}}"
						},
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "rows",
							"value": "10"
						},
						{
							"key": "sidx",
							"value": "datetime"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "job/2 - характеристики товаров",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"В ответе валидный JSON\", function () {\r",
							"    pm.response.to.be.json; \r",
							"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Массив ob_File есть в ответе\", function () {\r",
							"    pm.expect(jsonData.data.rows[0].ob_File).to.exist;\r",
							"    });\r",
							"\r",
							"var fileNameOnServer = pm.environment.get(\"fileNameOnServerCharacteristics\");\r",
							"pm.test(\"ССылка на загруженный файл присутствует\", function () {\r",
							"    pm.expect(jsonData.data.rows[0].ob_File[0].name).to.eql(\"Характеристики2.csv\");\r",
							"    pm.expect(jsonData.data.rows[0].ob_File[0].URL).not.to.be.empty;\r",
							"    pm.expect(jsonData.data.rows[0].org_server).to.eql(fileNameOnServer);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "session-id",
						"value": "{{sessionId}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{host}}etm.ru/api/ipro/job/2?sord=desc&d1={{lastMonthDate}}&page=1&rows=10&sidx=datetime",
					"protocol": "https",
					"host": [
						"{{host}}etm",
						"ru"
					],
					"path": [
						"api",
						"ipro",
						"job",
						"2"
					],
					"query": [
						{
							"key": "sord",
							"value": "desc"
						},
						{
							"key": "d1",
							"value": "{{lastMonthDate}}"
						},
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "rows",
							"value": "10"
						},
						{
							"key": "sidx",
							"value": "datetime"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "job/4 - сертификаты",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"В ответе валидный JSON\", function () {\r",
							"    pm.response.to.be.json; \r",
							"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Массив ob_File есть в ответе\", function () {\r",
							"    pm.expect(jsonData.data.rows[0].ob_File).to.exist;\r",
							"    });\r",
							"\r",
							"var fileNameOnServer = pm.environment.get(\"fileNameOnServerSertif\");\r",
							"pm.test(\"ССылка на загруженный файл присутствует\", function () {\r",
							"    pm.expect(jsonData.data.rows[0].ob_File[0].name).to.eql(\"sert138.csv\");\r",
							"    pm.expect(jsonData.data.rows[0].ob_File[0].URL).not.to.be.empty;\r",
							"    pm.expect(jsonData.data.rows[0].org_server).to.eql(fileNameOnServer);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "session-id",
						"value": "{{sessionId}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{host}}etm.ru/api/ipro/job/4?sord=desc&d1={{lastMonthDate}}&page=1&rows=10&sidx=datetime",
					"protocol": "https",
					"host": [
						"{{host}}etm",
						"ru"
					],
					"path": [
						"api",
						"ipro",
						"job",
						"4"
					],
					"query": [
						{
							"key": "sord",
							"value": "desc"
						},
						{
							"key": "d1",
							"value": "{{lastMonthDate}}"
						},
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "rows",
							"value": "10"
						},
						{
							"key": "sidx",
							"value": "datetime"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "job/5 -изображения",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"В ответе валидный JSON\", function () {\r",
							"    pm.response.to.be.json; \r",
							"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Массив ob_File есть в ответе\", function () {\r",
							"    pm.expect(jsonData.data.rows[0].ob_File).to.exist;\r",
							"    });\r",
							"\r",
							"var fileNameOnServer = pm.environment.get(\"fileNameOnServerImage\");\r",
							"pm.test(\"ССылка на загруженный файл присутствует\", function () {\r",
							"    pm.expect(jsonData.data.rows[0].ob_File[0].name).to.eql(\"images.csv\");\r",
							"    pm.expect(jsonData.data.rows[0].ob_File[0].URL).not.to.be.empty;\r",
							"    pm.expect(jsonData.data.rows[0].org_server).to.eql(fileNameOnServer);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "session-id",
						"value": "{{sessionId}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{host}}etm.ru/api/ipro/job/5?sord=desc&d1={{lastMonthDate}}&page=1&rows=10&sidx=datetime",
					"protocol": "https",
					"host": [
						"{{host}}etm",
						"ru"
					],
					"path": [
						"api",
						"ipro",
						"job",
						"5"
					],
					"query": [
						{
							"key": "sord",
							"value": "desc"
						},
						{
							"key": "d1",
							"value": "{{lastMonthDate}}"
						},
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "rows",
							"value": "10"
						},
						{
							"key": "sidx",
							"value": "datetime"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "job/7 - Описание",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"В ответе валидный JSON\", function () {\r",
							"    pm.response.to.be.json; \r",
							"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Массив ob_File есть в ответе\", function () {\r",
							"    pm.expect(jsonData.data.rows[0].ob_File).to.exist;\r",
							"    });\r",
							"\r",
							"var fileNameOnServer = pm.environment.get(\"fileNameOnServerDescription\");\r",
							"pm.test(\"ССылка на загруженный файл присутствует\", function () {\r",
							"    pm.expect(jsonData.data.rows[0].ob_File[0].name).to.eql(\"description.csv\");\r",
							"    pm.expect(jsonData.data.rows[0].ob_File[0].URL).not.to.be.empty;\r",
							"    pm.expect(jsonData.data.rows[0].org_server).to.eql(fileNameOnServer);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "session-id",
						"value": "{{sessionId}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{host}}etm.ru/api/ipro/job/7?sord=desc&d1={{lastMonthDate}}&page=1&rows=10&sidx=datetime",
					"protocol": "https",
					"host": [
						"{{host}}etm",
						"ru"
					],
					"path": [
						"api",
						"ipro",
						"job",
						"7"
					],
					"query": [
						{
							"key": "sord",
							"value": "desc"
						},
						{
							"key": "d1",
							"value": "{{lastMonthDate}}"
						},
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "rows",
							"value": "10"
						},
						{
							"key": "sidx",
							"value": "datetime"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "job/6 - Тех.информация",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"В ответе валидный JSON\", function () {\r",
							"    pm.response.to.be.json; \r",
							"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Массив ob_File есть в ответе\", function () {\r",
							"    pm.expect(jsonData.data.rows[0].ob_File).to.exist;\r",
							"    });\r",
							"\r",
							"var fileNameOnServer = pm.environment.get(\"fileNameOnServerTechInfo\");\r",
							"pm.test(\"ССылка на загруженный файл присутствует\", function () {\r",
							"    pm.expect(jsonData.data.rows[0].ob_File[0].name).to.eql(\"tech_info.csv\");\r",
							"    pm.expect(jsonData.data.rows[0].ob_File[0].URL).not.to.be.empty;\r",
							"    pm.expect(jsonData.data.rows[0].org_server).to.eql(fileNameOnServer);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "session-id",
						"value": "{{sessionId}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{host}}etm.ru/api/ipro/job/6?sord=desc&d1={{lastMonthDate}}&page=1&rows=10&sidx=datetime",
					"protocol": "https",
					"host": [
						"{{host}}etm",
						"ru"
					],
					"path": [
						"api",
						"ipro",
						"job",
						"6"
					],
					"query": [
						{
							"key": "sord",
							"value": "desc"
						},
						{
							"key": "d1",
							"value": "{{lastMonthDate}}"
						},
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "rows",
							"value": "10"
						},
						{
							"key": "sidx",
							"value": "datetime"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "job/11 -Цены",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"В ответе валидный JSON\", function () {\r",
							"    pm.response.to.be.json; \r",
							"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
							"});\r",
							"\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Массив ob_File есть в ответе\", function () {\r",
							"    pm.expect(jsonData.data.rows[0].ob_File).to.exist;\r",
							"    });\r",
							"\r",
							"var fileNameOnServer = pm.environment.get(\"fileNameOnServerPrices\");\r",
							"pm.test(\"ССылка на загруженный файл присутствует\", function () {\r",
							"    pm.expect(jsonData.data.rows[0].ob_File[0].name).to.eql(\"prices.csv\");\r",
							"    pm.expect(jsonData.data.rows[0].ob_File[0].URL).not.to.be.empty;\r",
							"    pm.expect(jsonData.data.rows[0].org_server).to.eql(fileNameOnServer);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "session-id",
						"value": "{{sessionId}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{host}}etm.ru/api/ipro/job/11?sord=desc&d1={{lastMonthDate}}&page=1&rows=10&sidx=datetime",
					"protocol": "https",
					"host": [
						"{{host}}etm",
						"ru"
					],
					"path": [
						"api",
						"ipro",
						"job",
						"11"
					],
					"query": [
						{
							"key": "sord",
							"value": "desc"
						},
						{
							"key": "d1",
							"value": "{{lastMonthDate}}"
						},
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "rows",
							"value": "10"
						},
						{
							"key": "sidx",
							"value": "datetime"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "job/12 - Аналоги",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"В ответе валидный JSON\", function () {\r",
							"    pm.response.to.be.json; \r",
							"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Массив ob_File есть в ответе\", function () {\r",
							"    pm.expect(jsonData.data.rows[0].ob_File).to.exist;\r",
							"    });\r",
							"\r",
							"var fileNameOnServer = pm.environment.get(\"fileNameOnServerAnalog\");\r",
							"pm.test(\"ССылка на загруженный файл присутствует\", function () {\r",
							"    pm.expect(jsonData.data.rows[0].ob_File[0].name).to.eql(\"analogs.csv\");\r",
							"    pm.expect(jsonData.data.rows[0].ob_File[0].URL).not.to.be.empty;\r",
							"    pm.expect(jsonData.data.rows[0].org_server).to.eql(fileNameOnServer);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "session-id",
						"value": "{{sessionId}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{host}}etm.ru/api/ipro/job/12?sord=desc&d1={{lastMonthDate}}&page=1&rows=10&sidx=datetime",
					"protocol": "https",
					"host": [
						"{{host}}etm",
						"ru"
					],
					"path": [
						"api",
						"ipro",
						"job",
						"12"
					],
					"query": [
						{
							"key": "sord",
							"value": "desc"
						},
						{
							"key": "d1",
							"value": "{{lastMonthDate}}"
						},
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "rows",
							"value": "10"
						},
						{
							"key": "sidx",
							"value": "datetime"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "job/13 - Конструктор",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"В ответе валидный JSON\", function () {\r",
							"    pm.response.to.be.json; \r",
							"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Массив ob_File есть в ответе\", function () {\r",
							"    pm.expect(jsonData.data.rows[0].ob_File).to.exist;\r",
							"    });\r",
							"\r",
							"var fileNameOnServer = pm.environment.get(\"fileNameOnServerKonstruktor\");\r",
							"pm.test(\"ССылка на загруженный файл присутствует\", function () {\r",
							"    pm.expect(jsonData.data.rows[0].ob_File[0].name).to.eql(\"konstructor.csv\");\r",
							"    pm.expect(jsonData.data.rows[0].ob_File[0].URL).not.to.be.empty;\r",
							"    pm.expect(jsonData.data.rows[0].org_server).to.eql(fileNameOnServer);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "session-id",
						"value": "{{sessionId}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{host}}etm.ru/api/ipro/job/13?sord=desc&d1={{lastMonthDate}}&page=1&rows=10&sidx=datetime",
					"protocol": "https",
					"host": [
						"{{host}}etm",
						"ru"
					],
					"path": [
						"api",
						"ipro",
						"job",
						"13"
					],
					"query": [
						{
							"key": "sord",
							"value": "desc"
						},
						{
							"key": "d1",
							"value": "{{lastMonthDate}}"
						},
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "rows",
							"value": "10"
						},
						{
							"key": "sidx",
							"value": "datetime"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "job/14 - Однотипные товары",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"В ответе валидный JSON\", function () {\r",
							"    pm.response.to.be.json; \r",
							"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Массив ob_File есть в ответе\", function () {\r",
							"    pm.expect(jsonData.data.rows[0].ob_File).to.exist;\r",
							"    });\r",
							"\r",
							"var fileNameOnServer = pm.environment.get(\"fileNameOnServerSametype\");\r",
							"pm.test(\"ССылка на загруженный файл присутствует\", function () {\r",
							"    pm.expect(jsonData.data.rows[0].ob_File[0].name).to.eql(\"sametypes.csv\");\r",
							"    pm.expect(jsonData.data.rows[0].ob_File[0].URL).not.to.be.empty;\r",
							"    pm.expect(jsonData.data.rows[0].org_server).to.eql(fileNameOnServer);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "session-id",
						"value": "{{sessionId}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{host}}etm.ru/api/ipro/job/14?sord=desc&d1={{lastMonthDate}}&page=1&rows=10&sidx=datetime",
					"protocol": "https",
					"host": [
						"{{host}}etm",
						"ru"
					],
					"path": [
						"api",
						"ipro",
						"job",
						"14"
					],
					"query": [
						{
							"key": "sord",
							"value": "desc"
						},
						{
							"key": "d1",
							"value": "{{lastMonthDate}}"
						},
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "rows",
							"value": "10"
						},
						{
							"key": "sidx",
							"value": "datetime"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "job/9 -статус товара на складе",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"В ответе валидный JSON\", function () {\r",
							"    pm.response.to.be.json; \r",
							"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Массив ob_File есть в ответе\", function () {\r",
							"    pm.expect(jsonData.data.rows[0].ob_File).to.exist;\r",
							"    });\r",
							"\r",
							"var fileNameOnServer = pm.environment.get(\"fileNameOnServerGoodsStatus\");\r",
							"pm.test(\"ССылка на загруженный файл присутствует\", function () {\r",
							"    pm.expect(jsonData.data.rows[0].ob_File[0].name).to.eql(\"goods_status.csv\");\r",
							"    pm.expect(jsonData.data.rows[0].ob_File[0].URL).not.to.be.empty;\r",
							"    pm.expect(jsonData.data.rows[0].org_server).to.eql(fileNameOnServer);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "session-id",
						"value": "{{sessionId}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{host}}etm.ru/api/ipro/job/9?sord=desc&d1={{lastMonthDate}}&page=1&rows=10&sidx=datetime",
					"protocol": "https",
					"host": [
						"{{host}}etm",
						"ru"
					],
					"path": [
						"api",
						"ipro",
						"job",
						"9"
					],
					"query": [
						{
							"key": "sord",
							"value": "desc"
						},
						{
							"key": "d1",
							"value": "{{lastMonthDate}}"
						},
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "rows",
							"value": "10"
						},
						{
							"key": "sidx",
							"value": "datetime"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "job/10 -срок изготовления",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"В ответе валидный JSON\", function () {\r",
							"    pm.response.to.be.json; \r",
							"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Массив ob_File есть в ответе\", function () {\r",
							"    pm.expect(jsonData.data.rows[0].ob_File).to.exist;\r",
							"    });\r",
							"\r",
							"var fileNameOnServer = pm.environment.get(\"fileNameOnServerDeliveryTime\");\r",
							"pm.test(\"ССылка на загруженный файл присутствует\", function () {\r",
							"    pm.expect(jsonData.data.rows[0].ob_File[0].name).to.eql(\"delivery_timelines.csv\");\r",
							"    pm.expect(jsonData.data.rows[0].ob_File[0].URL).not.to.be.empty;\r",
							"    pm.expect(jsonData.data.rows[0].org_server).to.eql(fileNameOnServer);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "session-id",
						"value": "{{sessionId}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{host}}etm.ru/api/ipro/job/10?sord=desc&d1={{lastMonthDate}}&page=1&rows=10&sidx=datetime",
					"protocol": "https",
					"host": [
						"{{host}}etm",
						"ru"
					],
					"path": [
						"api",
						"ipro",
						"job",
						"10"
					],
					"query": [
						{
							"key": "sord",
							"value": "desc"
						},
						{
							"key": "d1",
							"value": "{{lastMonthDate}}"
						},
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "rows",
							"value": "10"
						},
						{
							"key": "sidx",
							"value": "datetime"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "job/8 -складской ассортимент",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"В ответе валидный JSON\", function () {\r",
							"    pm.response.to.be.json; \r",
							"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Массив ob_File есть в ответе\", function () {\r",
							"    pm.expect(jsonData.data.rows[0].ob_File).to.exist;\r",
							"    });\r",
							"\r",
							"var fileNameOnServer = pm.environment.get(\"fileNameOnServerAssortment\");\r",
							"pm.test(\"ССылка на загруженный файл присутствует\", function () {\r",
							"    pm.expect(jsonData.data.rows[0].ob_File[0].name).to.eql(\"storage_assortment.csv\");\r",
							"    pm.expect(jsonData.data.rows[0].ob_File[0].URL).not.to.be.empty;\r",
							"    pm.expect(jsonData.data.rows[0].org_server).to.eql(fileNameOnServer);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "session-id",
						"value": "{{sessionId}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{host}}etm.ru/api/ipro/job/8?sord=desc&d1={{lastMonthDate}}&page=1&rows=10&sidx=datetime",
					"protocol": "https",
					"host": [
						"{{host}}etm",
						"ru"
					],
					"path": [
						"api",
						"ipro",
						"job",
						"8"
					],
					"query": [
						{
							"key": "sord",
							"value": "desc"
						},
						{
							"key": "d1",
							"value": "{{lastMonthDate}}"
						},
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "rows",
							"value": "10"
						},
						{
							"key": "sidx",
							"value": "datetime"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "job/15 -EDI",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"В ответе валидный JSON\", function () {\r",
							"    pm.response.to.be.json; \r",
							"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Массив ob_File есть в ответе\", function () {\r",
							"    pm.expect(jsonData.data.rows[0].ob_File).to.exist;\r",
							"    });\r",
							"\r",
							"var fileNameOnServer = pm.environment.get(\"fileNameOnServerEDI\");\r",
							"pm.test(\"ССылка на загруженный файл присутствует\", function () {\r",
							"    pm.expect(jsonData.data.rows[0].ob_File[0].name).to.eql(\"форма_EDI.txt\");\r",
							"    pm.expect(jsonData.data.rows[0].ob_File[0].URL).not.to.be.empty;\r",
							"    pm.expect(jsonData.data.rows[0].org_server).to.eql(fileNameOnServer);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "session-id",
						"value": "{{sessionId}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{host}}etm.ru/api/ipro/job/15?sord=desc&d1={{lastMonthDate}}&page=1&rows=10&sidx=datetime",
					"protocol": "https",
					"host": [
						"{{host}}etm",
						"ru"
					],
					"path": [
						"api",
						"ipro",
						"job",
						"15"
					],
					"query": [
						{
							"key": "sord",
							"value": "desc"
						},
						{
							"key": "d1",
							"value": "{{lastMonthDate}}"
						},
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "rows",
							"value": "10"
						},
						{
							"key": "sidx",
							"value": "datetime"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "job/16 - ЮЗЭДО",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"В ответе валидный JSON\", function () {\r",
							"    pm.response.to.be.json; \r",
							"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Массив ob_File есть в ответе\", function () {\r",
							"    pm.expect(jsonData.data.rows[0].ob_File).to.exist;\r",
							"    });\r",
							"\r",
							"var fileNameOnServer = pm.environment.get(\"fileNameOnServerUZEDO\");\r",
							"pm.test(\"ССылка на загруженный файл присутствует\", function () {\r",
							"    pm.expect(jsonData.data.rows[0].ob_File[0].name).to.eql(\"форма_UZEDO.txt\");\r",
							"    pm.expect(jsonData.data.rows[0].ob_File[0].URL).not.to.be.empty;\r",
							"    pm.expect(jsonData.data.rows[0].org_server).to.eql(fileNameOnServer);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "session-id",
						"value": "{{sessionId}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{host}}etm.ru/api/ipro/job/16?sord=desc&d1={{lastMonthDate}}&page=1&rows=10&sidx=datetime",
					"protocol": "https",
					"host": [
						"{{host}}etm",
						"ru"
					],
					"path": [
						"api",
						"ipro",
						"job",
						"16"
					],
					"query": [
						{
							"key": "sord",
							"value": "desc"
						},
						{
							"key": "d1",
							"value": "{{lastMonthDate}}"
						},
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "rows",
							"value": "10"
						},
						{
							"key": "sidx",
							"value": "datetime"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "job/17 - EDI Проекты",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"В ответе валидный JSON\", function () {\r",
							"    pm.response.to.be.json; \r",
							"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Массив ob_File есть в ответе\", function () {\r",
							"    pm.expect(jsonData.data.rows[0].ob_File).to.exist;\r",
							"    });\r",
							"\r",
							"var fileNameOnServer = pm.environment.get(\"fileNameOnServerEDIProject\");\r",
							"pm.test(\"ССылка на загруженный файл присутствует\", function () {\r",
							"    pm.expect(jsonData.data.rows[0].ob_File[0].name).to.eql(\"форма_EDIPROJECT.txt\");\r",
							"    pm.expect(jsonData.data.rows[0].ob_File[0].URL).not.to.be.empty;\r",
							"    pm.expect(jsonData.data.rows[0].org_server).to.eql(fileNameOnServer);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "session-id",
						"value": "{{sessionId}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{host}}etm.ru/api/ipro/job/17?sord=desc&d1={{lastMonthDate}}&page=1&rows=10&sidx=datetime",
					"protocol": "https",
					"host": [
						"{{host}}etm",
						"ru"
					],
					"path": [
						"api",
						"ipro",
						"job",
						"17"
					],
					"query": [
						{
							"key": "sord",
							"value": "desc"
						},
						{
							"key": "d1",
							"value": "{{lastMonthDate}}"
						},
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "rows",
							"value": "10"
						},
						{
							"key": "sidx",
							"value": "datetime"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "job/19 - Факторинг",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"В ответе валидный JSON\", function () {\r",
							"    pm.response.to.be.json; \r",
							"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Массив ob_File есть в ответе\", function () {\r",
							"    pm.expect(jsonData.data.rows[0].ob_File).to.exist;\r",
							"    });\r",
							"\r",
							"pm.test(\"ССылка на загруженный файл присутствует\", function () {\r",
							"    pm.expect(jsonData.data.rows[0].ob_File[0].name).to.eql(\"7Z.7z\");\r",
							"    pm.expect(jsonData.data.rows[0].ob_File[0].URL).not.to.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"var uuid = jsonData.data.rows[0].uuid;\r",
							"console.log(uuid);\r",
							"pm.environment.set(\"uuid\", uuid);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "session-id",
						"value": "{{sessionId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "https://{{host}}etm.ru/api/ipro/job/19?sord=desc&d1={{lastMonthDate}}&page=1&rows=10&sidx=datetime",
					"protocol": "https",
					"host": [
						"{{host}}etm",
						"ru"
					],
					"path": [
						"api",
						"ipro",
						"job",
						"19"
					],
					"query": [
						{
							"key": "sord",
							"value": "desc"
						},
						{
							"key": "d1",
							"value": "{{lastMonthDate}}"
						},
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "rows",
							"value": "10"
						},
						{
							"key": "sidx",
							"value": "datetime"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "job/20 -Прайс-листы",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"В ответе валидный JSON\", function () {\r",
							"    pm.response.to.be.json; \r",
							"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
							"});\r",
							"\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Массив ob_File есть в ответе\", function () {\r",
							"    pm.expect(jsonData.data.rows[0].ob_File).to.exist;\r",
							"    });\r",
							"\r",
							"var fileNameOnServer = pm.environment.get(\"fileNameOnServerPrices\");\r",
							"pm.test(\"ССылка на загруженный файл присутствует\", function () {\r",
							"    pm.expect(jsonData.data.rows[0].ob_File[0].name).to.eql(\"PRice.csv\");\r",
							"    pm.expect(jsonData.data.rows[0].ob_File[0].URL).not.to.be.empty;\r",
							"    pm.expect(jsonData.data.rows[0].org_server).to.eql(fileNameOnServer);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "session-id",
						"value": "{{sessionId}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{host}}etm.ru/api/ipro/job/20?sord=desc&d1={{lastMonthDate}}&page=1&rows=10&sidx=datetime",
					"protocol": "https",
					"host": [
						"{{host}}etm",
						"ru"
					],
					"path": [
						"api",
						"ipro",
						"job",
						"20"
					],
					"query": [
						{
							"key": "sord",
							"value": "desc"
						},
						{
							"key": "d1",
							"value": "{{lastMonthDate}}"
						},
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "rows",
							"value": "10"
						},
						{
							"key": "sidx",
							"value": "datetime"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "job/21 -Скидки",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"В ответе валидный JSON\", function () {\r",
							"    pm.response.to.be.json; \r",
							"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
							"});\r",
							"\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Массив ob_File есть в ответе\", function () {\r",
							"    pm.expect(jsonData.data.rows[0].ob_File).to.exist;\r",
							"    });\r",
							"\r",
							"var fileNameOnServer = pm.environment.get(\"fileNameOnServerPrices\");\r",
							"pm.test(\"ССылка на загруженный файл присутствует\", function () {\r",
							"    pm.expect(jsonData.data.rows[0].ob_File[0].name).to.eql(\"discount.csv\");\r",
							"    pm.expect(jsonData.data.rows[0].ob_File[0].URL).not.to.be.empty;\r",
							"    pm.expect(jsonData.data.rows[0].org_server).to.eql(fileNameOnServer);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "session-id",
						"value": "{{sessionId}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{host}}etm.ru/api/ipro/job/21?sord=desc&d1={{lastMonthDate}}&page=1&rows=10&sidx=datetime",
					"protocol": "https",
					"host": [
						"{{host}}etm",
						"ru"
					],
					"path": [
						"api",
						"ipro",
						"job",
						"21"
					],
					"query": [
						{
							"key": "sord",
							"value": "desc"
						},
						{
							"key": "d1",
							"value": "{{lastMonthDate}}"
						},
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "rows",
							"value": "10"
						},
						{
							"key": "sidx",
							"value": "datetime"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "job/{uuid}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"В ответе валидный JSON\", function () {\r",
							"    pm.response.to.be.json; \r",
							"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Массив data есть в ответе\", function () {\r",
							"    pm.expect(jsonData.data.rows).to.exist;\r",
							"    pm.expect(jsonData.data.rows).to.not.be.empty;\r",
							"});\r",
							"pm.test(\"Ответ меньше, чем 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "session-id",
						"value": "{{sessionId}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{host}}etm.ru/api/ipro/job/{{uuid}}",
					"protocol": "https",
					"host": [
						"{{host}}etm",
						"ru"
					],
					"path": [
						"api",
						"ipro",
						"job",
						"{{uuid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Upload_RAR",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function generateRandomNumber() {\r",
							"    var randomNumber = '';\r",
							"    for (var i = 0; i < 10; i++) {\r",
							"        randomNumber += Math.floor(Math.random() * 10); // Добавляем случайную цифру от 0 до 9\r",
							"    }\r",
							"    return randomNumber;\r",
							"}\r",
							"\r",
							"var randomDigitsNumber = generateRandomNumber();\r",
							"pm.environment.set(\"randomNum\", randomDigitsNumber);\r",
							"\r",
							"console.log(randomDigitsNumber);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"В ответе валидный JSON\", function () {\r",
							"    pm.response.to.be.json; \r",
							"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Массив data есть в ответе, не пустой, название файла соотвествует отправленному\", function () {\r",
							"    pm.expect(jsonData.data).to.exist;\r",
							"    pm.expect(jsonData.data).not.to.be.empty;\r",
							"    pm.expect(jsonData.data.source_name).to.be.eql(\"RAR.rar\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"var fileNameOnServer;\r",
							"pm.test(\"Получение названия файла на сервере\", \r",
							"    function () {\r",
							"    fileNameOnServer= pm.response.json().data.file_name;\r",
							"    pm.environment.set(\"fileNameOnServerRAR\", fileNameOnServer);\r",
							"});\r",
							"console.log(fileNameOnServer);\r",
							"\r",
							"var fileNameByUser\r",
							"pm.test(\"Название файла пользователя\", function(){\r",
							"    fileNameByUser = pm.response.json().data.source_name;\r",
							"    pm.environment.set(\"fileNameByUserRAR\", fileNameByUser);\r",
							"})\r",
							"console.log(fileNameByUser);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "session-id",
						"value": "{{sessionId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "rc",
							"value": "nsi",
							"type": "text"
						},
						{
							"key": "man",
							"value": "in",
							"type": "text"
						},
						{
							"key": "fileToUpload",
							"type": "file",
							"src": "postman-cloud:///1eee1392-8005-4540-8c93-cbaee8a13d0d"
						},
						{
							"key": "num",
							"value": "{{randomNum}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://{{host}}etm.ru/api/ipro/file/upload",
					"protocol": "https",
					"host": [
						"{{host}}etm",
						"ru"
					],
					"path": [
						"api",
						"ipro",
						"file",
						"upload"
					]
				}
			},
			"response": []
		},
		{
			"name": "update -Факторинг",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Статус код в теле ответа равен 200\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"В ответе валидный JSON\", function () {\r",
							"    pm.response.to.be.json; \r",
							"    pm.expect(JSON.parse(pm.response.text())).to.be.ok; \r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Массив data есть в ответе\", function () {\r",
							"    pm.expect(jsonData.data).to.exist;\r",
							"    pm.expect(jsonData.data).to.not.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Ответ меньше, чем 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "session-id",
						"value": "{{sessionId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"files\":[{\"file\":\"{{fileNameOnServerRAR}}\",\"name\":\"{{fileNameByUserRAR}}\"}]} ",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{host}}etm.ru/api/ipro/job/{{uuid}}/update",
					"protocol": "https",
					"host": [
						"{{host}}etm",
						"ru"
					],
					"path": [
						"api",
						"ipro",
						"job",
						"{{uuid}}",
						"update"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "sessionId",
			"value": "",
			"disabled": true
		},
		{
			"key": "lastMonthDate",
			"value": "",
			"disabled": true
		},
		{
			"key": "nearestMondayForCalendar",
			"value": "",
			"disabled": true
		},
		{
			"key": "nearestSundayEndOfMonth",
			"value": "",
			"disabled": true
		},
		{
			"key": "randomNum",
			"value": "",
			"disabled": true
		},
		{
			"key": "fileNameOnServer",
			"value": "",
			"disabled": true
		},
		{
			"key": "fileNameByUser",
			"value": "",
			"disabled": true
		},
		{
			"key": "fileNameOnServerCSV",
			"value": "",
			"disabled": true
		},
		{
			"key": "fileNameByUserCSV",
			"value": "",
			"disabled": true
		},
		{
			"key": "curentHour",
			"value": "",
			"disabled": true
		}
	]
}